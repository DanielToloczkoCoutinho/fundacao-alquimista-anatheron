#!/usr/bin/env python3
"""
üîó CORRELACIONADOR DE CIRCUITOS QU√ÇNTICOS - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è An√°lise de correla√ß√µes entre circuitos qu√¢nticos
üåå Mapeamento completo de scripts existentes
"""

import json
import subprocess
import sys
from pathlib import Path
import re

print("üîó CORRELACIONADOR DE CIRCUITOS QU√ÇNTICOS - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 70)
print("‚öõÔ∏è  AN√ÅLISE DE CORRELA√á√ïES E MAPEAMENTO COMPLETO")
print("")

class CorrelacionadorCircuitos:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.circuitos_mapeados = {}
        self.correlacoes_encontradas = {}
        self.scripts_existentes = {}
    
    def mapear_todos_scripts_quanticos(self):
        """Mapear TODOS os scripts qu√¢nticos existentes no sistema"""
        print("üîç MAPEANDO TODOS OS SCRIPTS QU√ÇNTICOS EXISTENTES...")
        
        padroes_quanticos = [
            'quant', 'qiskit', 'circuit', 'qubit', 'bell', 'teleport',
            'algoritmo', 'algorithm', 'quantum', 'emaranhado', 'entanglement',
            'superposicao', 'superposition', 'hadamard', 'cnot', 'gate'
        ]
        
        scripts_encontrados = {
            'circuitos_basicos': [],
            'circuitos_avancados': [], 
            'testes_verificacao': [],
            'algoritmos_complexos': [],
            'modulos_rainha': [],
            'scripts_configuracao': [],
            'outros_quanticos': []
        }
        
        # Buscar em TODOS os diret√≥rios
        for raiz, dirs, arquivos in os.walk(self.raiz):
            # Ignorar node_modules e outros diret√≥rios de sistema
            if any(dir_proibido in raiz for dir_proibido in ['node_modules', '__pycache__', '.git']):
                continue
                
            for arquivo in arquivos:
                if arquivo.endswith(('.py', '.sh', '.js', '.ipynb')):
                    caminho_completo = Path(raiz) / arquivo
                    arquivo_lower = arquivo.lower()
                    
                    # Verificar se √© script qu√¢ntico
                    if any(padrao in arquivo_lower for padrao in padroes_quanticos):
                        # Categorizar o script
                        info_script = self._categorizar_script(caminho_completo, arquivo_lower)
                        
                        if info_script['categoria'] == 'circuito_basico':
                            scripts_encontrados['circuitos_basicos'].append(info_script)
                        elif info_script['categoria'] == 'circuito_avancado':
                            scripts_encontrados['circuitos_avancados'].append(info_script)
                        elif info_script['categoria'] == 'teste_verificacao':
                            scripts_encontrados['testes_verificacao'].append(info_script)
                        elif info_script['categoria'] == 'algoritmo_complexo':
                            scripts_encontrados['algoritmos_complexos'].append(info_script)
                        elif info_script['categoria'] == 'modulo_rainha':
                            scripts_encontrados['modulos_rainha'].append(info_script)
                        elif info_script['categoria'] == 'configuracao':
                            scripts_encontrados['scripts_configuracao'].append(info_script)
                        else:
                            scripts_encontrados['outros_quanticos'].append(info_script)
        
        # Mostrar resultados do mapeamento
        total_scripts = sum(len(scripts) for scripts in scripts_encontrados.values())
        print(f"   üìä TOTAL DE SCRIPTS QU√ÇNTICOS ENCONTRADOS: {total_scripts}")
        
        for categoria, scripts in scripts_encontrados.items():
            print(f"   üìÅ {categoria.upper():20}: {len(scripts)} scripts")
            for script in scripts[:3]:  # Mostrar 3 por categoria
                print(f"      ‚Ä¢ {script['nome']}")
        
        return scripts_encontrados
    
    def _categorizar_script(self, caminho, nome_arquivo):
        """Categorizar script baseado no conte√∫do e nome"""
        try:
            with open(caminho, 'r', encoding='utf-8') as f:
                conteudo = f.read()
        except:
            conteudo = ""
        
        info = {
            'caminho': str(caminho),
            'nome': caminho.name,
            'categoria': 'outro',
            'linhas': conteudo.count('\n') + 1,
            'tem_qiskit': 'qiskit' in conteudo.lower(),
            'tem_circuitos': 'quantumcircuit' in conteudo.lower() or 'circuit' in conteudo.lower(),
            'tem_emaranhamento': any(termo in conteudo.lower() for termo in ['bell', 'emaranh', 'entangl']),
            'tem_algoritmo': any(termo in conteudo.lower() for termo in ['algoritmo', 'algorithm', 'protocol'])
        }
        
        # Determinar categoria
        if any(termo in nome_arquivo for termo in ['psi', 'phi', 'bell', 'basico', 'basic']):
            info['categoria'] = 'circuito_basico'
        elif any(termo in nome_arquivo for termo in ['teleport', 'algoritmo', 'algorithm', 'complex']):
            info['categoria'] = 'circuito_avancado'
        elif any(termo in nome_arquivo for termo in ['teste', 'test', 'verific', 'valid']):
            info['categoria'] = 'teste_verificacao'
        elif any(termo in nome_arquivo for termo in ['modulo', 'zennith', 'rainha', 'm29']):
            info['categoria'] = 'modulo_rainha'
        elif any(termo in nome_arquivo for termo in ['config', 'setup', 'ambiente', 'verify']):
            info['categoria'] = 'configuracao'
        elif info['tem_algoritmo'] and info['tem_circuitos']:
            info['categoria'] = 'algoritmo_complexo'
        
        return info
    
    def analisar_correlacoes_circuitos(self, scripts_mapeados):
        """Analisar correla√ß√µes entre os circuitos qu√¢nticos"""
        print("\nüîó ANALISANDO CORRELA√á√ïES ENTRE CIRCUITOS...")
        
        correlacoes = {
            'estados_bell_correlacionados': [],
            'protocolos_relacionados': [],
            'dependencias_compartilhadas': [],
            'fluxo_evolucao': []
        }
        
        # Circuitos que sabemos que existem
        circuitos_conhecidos = [
            'circuito_psi_plus.py',
            'circuito_phi_minus.py', 
            'teletransporte_quantico.py',
            'teste_bell.py',
            'CIRCUITOS_UNIFICADOS.py'
        ]
        
        # Analisar correla√ß√µes entre circuitos conhecidos
        for circuito in circuitos_conhecidos:
            caminho_circuito = self.raiz / circuito
            if caminho_circuito.exists():
                print(f"   üîç ANALISANDO CORRELA√á√ïES: {circuito}")
                
                try:
                    with open(caminho_circuito, 'r') as f:
                        conteudo = f.read()
                    
                    # Verificar rela√ß√µes com outros circuitos
                    if 'psi_plus' in conteudo.lower() or 'œà‚Å∫' in conteudo:
                        correlacoes['estados_bell_correlacionados'].append({
                            'circuito': circuito,
                            'relacao': 'Estado Bell |Œ®‚Å∫‚ü©',
                            'tipo': 'estado_basico'
                        })
                    
                    if 'phi_minus' in conteudo.lower() or 'œÜ‚Åª' in conteudo:
                        correlacoes['estados_bell_correlacionados'].append({
                            'circuito': circuito,
                            'relacao': 'Estado Bell |Œ¶‚Åª‚ü©', 
                            'tipo': 'estado_basico'
                        })
                    
                    if 'teleport' in conteudo.lower():
                        correlacoes['protocolos_relacionados'].append({
                            'circuito': circuito,
                            'relacao': 'Protocolo de Teletransporte',
                            'tipo': 'protocolo_avancado'
                        })
                    
                    if 'bell' in conteudo.lower() and 'test' in conteudo.lower():
                        correlacoes['testes_verificacao'].append({
                            'circuito': circuito,
                            'relacao': 'Teste de Desigualdade de Bell',
                            'tipo': 'verificacao_emaranhamento'
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå ERRO AO ANALISAR {circuito}: {e}")
        
        # Mostrar correla√ß√µes encontradas
        for tipo, relacoes in correlacoes.items():
            if relacoes:
                print(f"   üìä {tipo.upper().replace('_', ' ')}:")
                for relacao in relacoes:
                    print(f"      ‚Ä¢ {relacao['circuito']} ‚Üí {relacao['relacao']}")
        
        return correlacoes
    
    def executar_sequencia_correlacionada(self):
        """Executar sequ√™ncia de circuitos correlacionados"""
        print("\nüîÑ EXECUTANDO SEQU√äNCIA CORRELACIONADA...")
        
        # Sequ√™ncia l√≥gica baseada nas correla√ß√µes
        sequencia_correlacionada = [
            {
                'nome': 'üåå ESTADO BELL |Œ®‚Å∫‚ü© - Base',
                'arquivo': 'circuito_psi_plus.py',
                'descricao': 'Estado emaranhado b√°sico para correla√ß√µes'
            },
            {
                'nome': 'üåå ESTADO BELL |Œ¶‚Åª‚ü© - Com Fase', 
                'arquivo': 'circuito_phi_minus.py',
                'descricao': 'Estado emaranhado com fase para compara√ß√£o'
            },
            {
                'nome': 'üîî TESTE DE BELL - Verifica√ß√£o',
                'arquivo': 'teste_bell.py', 
                'descricao': 'Verifica√ß√£o das correla√ß√µes qu√¢nticas'
            },
            {
                'nome': 'üöÄ TELETRANSPORTE - Aplica√ß√£o',
                'arquivo': 'teletransporte_quantico.py',
                'descricao': 'Aplica√ß√£o pr√°tica das correla√ß√µes'
            },
            {
                'nome': '‚ö° UNIFICA√á√ÉO - Consolida√ß√£o',
                'arquivo': 'CIRCUITOS_UNIFICADOS.py',
                'descricao': 'Consolida√ß√£o de todos os circuitos'
            }
        ]
        
        resultados_correlacionados = {}
        
        for i, item in enumerate(sequencia_correlacionada, 1):
            print(f"\n{'üî∑'*30}")
            print(f"üîó [{i}/{len(sequencia_correlacionada)}] {item['nome']}")
            print(f"üìñ {item['descricao']}")
            print(f"{'üî∑'*30}")
            
            caminho_arquivo = self.raiz / item['arquivo']
            if caminho_arquivo.exists():
                try:
                    resultado = subprocess.run(
                        [sys.executable, str(caminho_arquivo)],
                        capture_output=True,
                        text=True,
                        timeout=30
                    )
                    
                    if resultado.returncode == 0:
                        resultados_correlacionados[item['nome']] = "‚úÖ SUCESSO"
                        print("   ‚úÖ EXECUTADO COM SUCESSO")
                        
                        # Mostrar resultados relevantes
                        linhas = resultado.stdout.split('\n')
                        for linha in linhas:
                            if any(termo in linha.lower() for termo in ['resultado', 'correla√ß√£o', 'bell', 'sucesso', '√™xito']):
                                print(f"   üìä {linha.strip()}")
                    else:
                        resultados_correlacionados[item['nome']] = f"‚ùå ERRO: {resultado.stderr[:100]}"
                        print(f"   ‚ùå FALHA NA EXECU√á√ÉO")
                        
                except subprocess.TimeoutExpired:
                    resultados_correlacionados[item['nome']] = "‚è∞ TIMEOUT"
                    print(f"   ‚è∞ TIMEOUT")
                except Exception as e:
                    resultados_correlacionados[item['nome']] = f"üí• EXCE√á√ÉO: {e}"
                    print(f"   üí• EXCE√á√ÉO: {e}")
            else:
                resultados_correlacionados[item['nome']] = "üö´ N√ÉO ENCONTRADO"
                print(f"   üö´ ARQUIVO N√ÉO ENCONTRADO")
            
            # Pausa entre execu√ß√µes correlacionadas
            if i < len(sequencia_correlacionada):
                print(f"\n‚è≥ PREPARANDO PR√ìXIMO CIRCUITO CORRELACIONADO...")
                import time
                time.sleep(1)
        
        return resultados_correlacionados
    
    def gerar_relatorio_final_correlacoes(self, scripts_mapeados, correlacoes, resultados_execucao):
        """Gerar relat√≥rio final completo de correla√ß√µes"""
        print(f"\n{'='*80}")
        print("üéâ RELAT√ìRIO FINAL - CORRELA√á√ïES DE CIRCUITOS QU√ÇNTICOS")
        print(f"{'='*80}")
        
        total_scripts = sum(len(scripts) for scripts in scripts_mapeados.values())
        sucessos_execucao = sum(1 for r in resultados_execucao.values() if "‚úÖ" in r)
        
        print(f"\nüìä MAPEAMENTO COMPLETO DO SISTEMA:")
        print(f"   ‚Ä¢ Total de scripts qu√¢nticos: {total_scripts}")
        for categoria, scripts in scripts_mapeados.items():
            print(f"   ‚Ä¢ {categoria.replace('_', ' ').title():25}: {len(scripts)} scripts")
        
        print(f"\nüîó CORRELA√á√ïES IDENTIFICADAS:")
        for tipo, relacoes in correlacoes.items():
            if relacoes:
                print(f"   ‚Ä¢ {tipo.replace('_', ' ').title():25}: {len(relacoes)} rela√ß√µes")
                for relacao in relacoes[:2]:  # Mostrar 2 exemplos
                    print(f"      ‚Ü≥ {relacao['circuito']} ‚Üí {relacao['relacao']}")
        
        print(f"\nüîÑ EXECU√á√ÉO CORRELACIONADA:")
        print(f"   ‚Ä¢ Circuitos executados: {len(resultados_execucao)}")
        print(f"   ‚Ä¢ Sucessos: {sucessos_execucao}/{len(resultados_execucao)}")
        
        print(f"\nüåå FLUXO L√ìGICO IDENTIFICADO:")
        fluxo_logico = [
            "1. üåå Estados Bell B√°sicos (|Œ®‚Å∫‚ü©, |Œ¶‚Åª‚ü©)",
            "2. üîî Verifica√ß√£o de Emaranhamento (Teste de Bell)", 
            "3. üöÄ Aplica√ß√£o Pr√°tica (Teletransporte Qu√¢ntico)",
            "4. ‚ö° Consolida√ß√£o (Circuitos Unificados)",
            "5. üëë Integra√ß√£o com M√≥dulos Rainha"
        ]
        
        for passo in fluxo_logico:
            print(f"   {passo}")
        
        print(f"\nüöÄ PR√ìXIMOS PASSOS ESTRAT√âGICOS:")
        if sucessos_execucao == len(resultados_execucao):
            print("   ‚úÖ TODOS OS CIRCUITOS CORRELACIONADOS EXECUTADOS COM SUCESSO!")
            print("   üåå SISTEMA PERFEITAMENTE CORRELACIONADO!")
            print("   üöÄ PRONTO PARA IBM QUANTUM E APLICA√á√ïES AVAN√áADAS!")
        else:
            print("   ‚ö†Ô∏è  ALGUNS CIRCUITOS PRECISAM DE AJUSTES")
            print("   üîß VERIFICAR CORRELA√á√ïES COM FALHA")
            print("   üîÑ OTIMIZAR SEQU√äNCIA L√ìGICA")
        
        return {
            'total_scripts': total_scripts,
            'correlacoes_identificadas': sum(len(relacoes) for relacoes in correlacoes.values()),
            'sucessos_execucao': sucessos_execucao,
            'fluxo_logico': fluxo_logico
        }

# EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    import os
    
    correlacionador = CorrelacionadorCircuitos()
    
    # 1. Mapear todos os scripts
    scripts_mapeados = correlacionador.mapear_todos_scripts_quanticos()
    
    # 2. Analisar correla√ß√µes
    correlacoes = correlacionador.analisar_correlacoes_circuitos(scripts_mapeados)
    
    # 3. Executar sequ√™ncia correlacionada
    resultados_execucao = correlacionador.executar_sequencia_correlacionada()
    
    # 4. Gerar relat√≥rio final
    relatorio_final = correlacionador.gerar_relatorio_final_correlacoes(
        scripts_mapeados, correlacoes, resultados_execucao
    )
    
    print(f"\nüîó CORRELA√á√ÉO DE CIRCUITOS CONCLU√çDA!")
    print("üåå SISTEMA COMPLETAMENTE MAPEADO E CORRELACIONADO!")
