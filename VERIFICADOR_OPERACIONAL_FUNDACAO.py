#!/usr/bin/env python3
"""
üåü VERIFICADOR OPERACIONAL - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Verifica√ß√£o de sistemas cr√≠ticos e funcionalidades
üåå Garantia de continuidade operacional
"""

import subprocess
import json
from pathlib import Path
from datetime import datetime

print("üåü VERIFICADOR OPERACIONAL - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 70)
print("‚öõÔ∏è  VERIFICA√á√ÉO DE SISTEMAS CR√çTICOS E FUNCIONALIDADES")
print("")

class VerificadorOperacional:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.resultados_verificacao = {}
    
    def verificar_sistemas_criticos(self):
        """Verificar sistemas cr√≠ticos da Funda√ß√£o"""
        print("üîß VERIFICANDO SISTEMAS CR√çTICOS...")
        
        sistemas_criticos = [
            {
                'nome': 'Sistema de Mapeamento',
                'arquivos': ['ORGANIZADOR_HIERARQUICO_COMPLETO.py', 'MAPEADOR_LABORATORIOS_AVANCADO.py'],
                'descricao': 'Sistema de organiza√ß√£o e cataloga√ß√£o'
            },
            {
                'nome': 'Sistema Qu√¢ntico', 
                'arquivos': ['circuito_psi_plus.py', 'teletransporte_quantico.py', 'teste_bell.py'],
                'descricao': 'Circuitos e algoritmos qu√¢nticos'
            },
            {
                'nome': 'Sistema de An√°lise',
                'arquivos': ['ANALISE_MAGNITUDE_FUNDACAO.py', 'INVESTIGADOR_REALIDADE_FUNDACAO.py'],
                'descricao': 'An√°lise e investiga√ß√£o de dados'
            },
            {
                'nome': 'Sistema de Configura√ß√£o',
                'arquivos': ['CONFIGURADOR_IBM_CHAVES.py', 'CONFIGURADOR_IBM_AVANCADO.py'],
                'descricao': 'Configura√ß√£o e conex√µes externas'
            }
        ]
        
        resultados = {}
        
        for sistema in sistemas_criticos:
            print(f"   üîç {sistema['nome']}...")
            
            arquivos_encontrados = []
            arquivos_faltantes = []
            
            for arquivo in sistema['arquivos']:
                caminho = self.raiz / arquivo
                if caminho.exists():
                    arquivos_encontrados.append(arquivo)
                else:
                    arquivos_faltantes.append(arquivo)
            
            status = "‚úÖ OPERACIONAL" if len(arquivos_faltantes) == 0 else "‚ö†Ô∏è  PARCIAL"
            
            resultados[sistema['nome']] = {
                'status': status,
                'arquivos_encontrados': arquivos_encontrados,
                'arquivos_faltantes': arquivos_faltantes,
                'descricao': sistema['descricao']
            }
            
            if status == "‚úÖ OPERACIONAL":
                print(f"      ‚úÖ {sistema['nome']}: OPERACIONAL")
            else:
                print(f"      ‚ö†Ô∏è  {sistema['nome']}: PARCIAL ({len(arquivos_faltantes)} faltantes)")
        
        self.resultados_verificacao['sistemas_criticos'] = resultados
        return resultados
    
    def verificar_funcionalidades_principais(self):
        """Verificar funcionalidades principais"""
        print("\n‚öôÔ∏è VERIFICANDO FUNCIONALIDADES PRINCIPAIS...")
        
        funcionalidades = [
            {
                'nome': 'Execu√ß√£o de Scripts Python',
                'teste': ['python3', '--version'],
                'descricao': 'Interpretador Python operacional'
            },
            {
                'nome': 'Sistema de Arquivos',
                'teste': ['ls', '-la'],
                'descricao': 'Acesso ao sistema de arquivos'
            },
            {
                'nome': 'Processamento B√°sico',
                'teste': ['python3', '-c', 'print("OK")'],
                'descricao': 'Processamento e sa√≠da b√°sica'
            }
        ]
        
        resultados = {}
        
        for func in funcionalidades:
            print(f"   üîç {func['nome']}...")
            
            try:
                processo = subprocess.run(
                    func['teste'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if processo.returncode == 0:
                    resultados[func['nome']] = {
                        'status': '‚úÖ OPERACIONAL',
                        'descricao': func['descricao'],
                        'detalhes': 'Teste executado com sucesso'
                    }
                    print(f"      ‚úÖ {func['nome']}: OPERACIONAL")
                else:
                    resultados[func['nome']] = {
                        'status': '‚ùå FALHA',
                        'descricao': func['descricao'], 
                        'detalhes': processo.stderr
                    }
                    print(f"      ‚ùå {func['nome']}: FALHA")
            
            except Exception as e:
                resultados[func['nome']] = {
                    'status': 'üí• EXCE√á√ÉO',
                    'descricao': func['descricao'],
                    'detalhes': str(e)
                }
                print(f"      üí• {func['nome']}: EXCE√á√ÉO")
        
        self.resultados_verificacao['funcionalidades'] = resultados
        return resultados
    
    def verificar_estado_geral(self):
        """Verificar estado geral do sistema"""
        print("\nüìä VERIFICANDO ESTADO GERAL DO SISTEMA...")
        
        # An√°lise b√°sica do ambiente
        try:
            import psutil
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            estado = {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'disk_free_gb': disk.free / (1024**3),
                'timestamp': datetime.now().isoformat()
            }
            
            print(f"   üíª CPU: {cpu_percent}%")
            print(f"   üíæ Mem√≥ria: {memory.percent}%")
            print(f"   üíø Disco livre: {estado['disk_free_gb']:.2f} GB")
            
            # Avalia√ß√£o geral
            if cpu_percent < 80 and memory.percent < 85 and estado['disk_free_gb'] > 1:
                status_geral = "‚úÖ EST√ÅVEL"
            else:
                status_geral = "‚ö†Ô∏è  ALERTA"
            
            estado['status_geral'] = status_geral
            print(f"   üéØ STATUS GERAL: {status_geral}")
        
        except ImportError:
            estado = {
                'status_geral': '‚ö†Ô∏è  M√ìDULOS FALTANTES',
                'detalhes': 'psutil n√£o dispon√≠vel para m√©tricas detalhadas'
            }
            print(f"   üéØ STATUS GERAL: ‚ö†Ô∏è  M√ìDULOS FALTANTES")
        
        self.resultados_verificacao['estado_geral'] = estado
        return estado
    
    def gerar_relatorio_operacional(self):
        """Gerar relat√≥rio operacional completo"""
        print(f"\n{'='*80}")
        print("üìã RELAT√ìRIO OPERACIONAL - FUNDA√á√ÉO ALQUIMISTA")
        print(f"{'='*80}")
        
        sistemas = self.verificar_sistemas_criticos()
        funcionalidades = self.verificar_funcionalidades_principais()
        estado = self.verificar_estado_geral()
        
        # Contar status
        total_sistemas = len(sistemas)
        sistemas_operacionais = sum(1 for s in sistemas.values() if s['status'] == '‚úÖ OPERACIONAL')
        
        total_funcionalidades = len(funcionalidades)
        funcionalidades_operacionais = sum(1 for f in funcionalidades.values() if f['status'] == '‚úÖ OPERACIONAL')
        
        print(f"\nüìä RESUMO OPERACIONAL:")
        print(f"   ‚Ä¢ Sistemas cr√≠ticos: {sistemas_operacionais}/{total_sistemas} operacionais")
        print(f"   ‚Ä¢ Funcionalidades: {funcionalidades_operacionais}/{total_funcionalidades} operacionais")
        print(f"   ‚Ä¢ Estado geral: {estado.get('status_geral', 'N/A')}")
        
        print(f"\nüéØ SISTEMAS CR√çTICOS:")
        for nome, info in sistemas.items():
            emoji = "‚úÖ" if info['status'] == '‚úÖ OPERACIONAL' else "‚ö†Ô∏è"
            print(f"   {emoji} {nome}: {info['status']}")
        
        print(f"\n‚öôÔ∏è FUNCIONALIDADES:")
        for nome, info in funcionalidades.items():
            emoji = "‚úÖ" if info['status'] == '‚úÖ OPERACIONAL' else "‚ùå"
            print(f"   {emoji} {nome}: {info['status']}")
        
        print(f"\nüí° CONCLUS√ÉO:")
        if sistemas_operacionais == total_sistemas and funcionalidades_operacionais == total_funcionalidades:
            print("   üåü SISTEMA COMPLETAMENTE OPERACIONAL!")
            print("   üöÄ PRONTO PARA CONTINUIDADE ESTRAT√âGICA!")
            print("   üí´ TODAS AS FUNCIONALIDADES DISPON√çVEIS!")
        else:
            print("   ‚ö†Ô∏è  SISTEMA PARCIALMENTE OPERACIONAL!")
            print("   üîß ALGUNS AJUSTES PODEM SER NECESS√ÅRIOS!")
            print("   üìà CONTINUIDADE GARANTIDA COM OBSERVA√á√ïES!")
        
        return {
            'sistemas_criticos': sistemas,
            'funcionalidades': funcionalidades,
            'estado_geral': estado,
            'resumo': {
                'sistemas_operacionais': sistemas_operacionais,
                'total_sistemas': total_sistemas,
                'funcionalidades_operacionais': funcionalidades_operacionais,
                'total_funcionalidades': total_funcionalidades
            }
        }
    
    def exportar_verificacao_completa(self):
        """Exportar verifica√ß√£o completa"""
        print(f"\nüíæ EXPORTANDO VERIFICA√á√ÉO OPERACIONAL...")
        
        relatorio = self.gerar_relatorio_operacional()
        
        verificacao_completa = {
            'timestamp': datetime.now().isoformat(),
            'titulo': 'VERIFICA√á√ÉO OPERACIONAL - FUNDA√á√ÉO ALQUIMISTA',
            'relatorio': relatorio,
            'status_geral': 'OPERACIONAL' if (
                relatorio['resumo']['sistemas_operacionais'] == relatorio['resumo']['total_sistemas'] and
                relatorio['resumo']['funcionalidades_operacionais'] == relatorio['resumo']['total_funcionalidades']
            ) else 'PARCIALMENTE OPERACIONAL'
        }
        
        # Salvar verifica√ß√£o
        with open('VERIFICACAO_OPERACIONAL.json', 'w', encoding='utf-8') as f:
            json.dump(verificacao_completa, f, indent=2, ensure_ascii=False)
        
        print("   ‚úÖ VERIFICACAO_OPERACIONAL.json salvo!")
        
        return verificacao_completa

def main():
    verificador = VerificadorOperacional()
    
    # Executar verifica√ß√£o completa
    verificacao = verificador.exportar_verificacao_completa()
    
    print(f"\nüåü VERIFICA√á√ÉO OPERACIONAL CONCLU√çDA!")
    print(f"üéØ STATUS: {verificacao['status_geral']}")
    print(f"üöÄ SISTEMA PRONTO PARA CONTINUIDADE!")

if __name__ == "__main__":
    main()
