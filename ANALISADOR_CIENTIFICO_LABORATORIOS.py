#!/usr/bin/env python3
"""
üî¨ ANALISADOR CIENT√çFICO DE LABORAT√ìRIOS - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Classifica√ß√£o por √°rea cient√≠fica espec√≠fica
üåå Identifica√ß√£o de equa√ß√µes e f√≥rmulas especializadas
"""

import os
import re
import json
from pathlib import Path
from datetime import datetime

print("üî¨ ANALISADOR CIENT√çFICO DE LABORAT√ìRIOS - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 70)
print("‚öõÔ∏è  CLASSIFICA√á√ÉO POR √ÅREA CIENT√çFICA ESPEC√çFICA")
print("")

class AnalisadorCientifico:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.laboratorios_classificados = {}
        self.equacoes_identificadas = {}
        self.areas_cientificas = {}
    
    def executar_analise_cientifica_completa(self):
        """Executar an√°lise cient√≠fica completa dos laborat√≥rios"""
        print("üîç INICIANDO AN√ÅLISE CIENT√çFICA AVAN√áADA...")
        
        # √Åreas cient√≠ficas para classifica√ß√£o
        areas_cientificas = {
            'fisica_quantica': {
                'termos': ['qubit', 'quantum', 'circuit', 'bell', 'emaranhamento', 'superposicao', 'hadamard', 'cnot'],
                'equacoes': ['œà', 'œÜ', '‚ü®œà|œÜ‚ü©', 'ƒß', 'H|œà‚ü©=E|œà‚ü©']
            },
            'quimica_computacional': {
                'termos': ['molecula', 'atom', 'orbital', 'binding', 'energy', 'reaction', 'compound'],
                'equacoes': ['HŒ®=EŒ®', 'e^{-Œ≤H}', '‚ü®œï|H|œà‚ü©']
            },
            'biologia_molecular': {
                'termos': ['protein', 'dna', 'rna', 'gene', 'cell', 'enzyme', 'metabolism'],
                'equacoes': ['k_{cat}', 'K_m', 'ŒîG']
            },
            'medicina_quantica': {
                'termos': ['medical', 'health', 'therapy', 'diagnosis', 'treatment', 'patient', 'clinical'],
                'equacoes': ['PD', 'AUC', 'IC50']
            },
            'cosmologia': {
                'termos': ['cosmos', 'universe', 'blackhole', 'gravity', 'relativity', 'spacetime'],
                'equacoes': ['G_{\\mu\\nu}=8œÄT_{\\mu\\nu}', 'ds^2=g_{\\mu\\nu}dx^\\mu dx^\\nu']
            },
            'matematica_avancada': {
                'termos': ['equation', 'formula', 'theorem', 'proof', 'matrix', 'tensor', 'manifold'],
                'equacoes': ['e^{iœÄ}+1=0', '‚àá¬∑E=œÅ/Œµ_0', 'F=ma']
            },
            'computacao_avancada': {
                'termos': ['algorithm', 'compute', 'process', 'data', 'analysis', 'simulation', 'model'],
                'equacoes': ['O(n)', 'P=NP?', 'f(x)=‚à´_{-‚àû}^{‚àû}F(Œæ)e^{2œÄiŒæx}dŒæ']
            }
        }
        
        laboratorios_analisados = 0
        equacoes_encontradas = 0
        
        for raiz, dirs, arquivos in os.walk(self.raiz):
            # Analisar diret√≥rios de laborat√≥rios
            for diretorio in dirs:
                if any(termo in diretorio.lower() for termo in ['lab', 'experiment', 'research', 'study']):
                    info_lab = self._analisar_laboratorio_cientifico(Path(raiz) / diretorio, diretorio, areas_cientificas)
                    if info_lab:
                        laboratorios_analisados += 1
                        equacoes_encontradas += len(info_lab.get('equacoes', []))
            
            # Analisar arquivos de laborat√≥rios virtuais
            for arquivo in arquivos:
                if any(termo in arquivo.lower() for termo in ['experiment', 'research', 'study', 'analysis']):
                    caminho_arquivo = Path(raiz) / arquivo
                    if caminho_arquivo.suffix in ['.py', '.ipynb', '.r', '.m']:
                        info_lab = self._analisar_arquivo_cientifico(caminho_arquivo, arquivo, areas_cientificas)
                        if info_lab:
                            laboratorios_analisados += 1
                            equacoes_encontradas += len(info_lab.get('equacoes', []))
        
        print(f"   üìä LABORAT√ìRIOS ANALISADOS: {laboratorios_analisados}")
        print(f"   üßÆ EQUA√á√ïES IDENTIFICADAS: {equacoes_encontradas}")
        
        return laboratorios_analisados, equacoes_encontradas
    
    def _analisar_laboratorio_cientifico(self, caminho_lab, nome_lab, areas_cientificas):
        """Analisar laborat√≥rio f√≠sico com foco cient√≠fico"""
        try:
            arquivos = list(caminho_lab.rglob('*'))
            scripts = [f for f in arquivos if f.suffix in ['.py', '.ipynb', '.r', '.m', '.cpp']]
            
            conteudo_total = ""
            equacoes_encontradas = []
            areas_detectadas = set()
            
            for script in scripts[:10]:  # Analisar at√© 10 scripts por laborat√≥rio
                try:
                    with open(script, 'r', encoding='utf-8') as f:
                        conteudo = f.read()
                        conteudo_total += conteudo + "\n"
                        
                        # Buscar equa√ß√µes
                        equacoes = self._extrair_equacoes(conteudo)
                        equacoes_encontradas.extend(equacoes)
                        
                        # Identificar √°reas cient√≠ficas
                        for area, dados in areas_cientificas.items():
                            if any(termo in conteudo.lower() for termo in dados['termos']):
                                areas_detectadas.add(area)
                            
                except:
                    continue
            
            # Classificar laborat√≥rio
            area_principal = self._determinar_area_principal(areas_detectadas, conteudo_total)
            
            info = {
                'nome': nome_lab,
                'caminho': str(caminho_lab),
                'tipo': 'laboratorio_fisico',
                'area_principal': area_principal,
                'areas_detectadas': list(areas_detectadas),
                'total_scripts': len(scripts),
                'equacoes_identificadas': equacoes_encontradas[:10],  # Limitar a 10
                'descricao_cientifica': self._gerar_descricao_cientifica(area_principal, equacoes_encontradas)
            }
            
            # Atualizar estat√≠sticas
            if area_principal not in self.laboratorios_classificados:
                self.laboratorios_classificados[area_principal] = []
            self.laboratorios_classificados[area_principal].append(info)
            
            return info
            
        except Exception as e:
            return None
    
    def _analisar_arquivo_cientifico(self, caminho_arquivo, nome_arquivo, areas_cientificas):
        """Analisar arquivo de laborat√≥rio virtual"""
        try:
            with open(caminho_arquivo, 'r', encoding='utf-8') as f:
                conteudo = f.read()
            
            # Buscar equa√ß√µes
            equacoes_encontradas = self._extrair_equacoes(conteudo)
            
            # Identificar √°reas cient√≠ficas
            areas_detectadas = set()
            for area, dados in areas_cientificas.items():
                if any(termo in conteudo.lower() for termo in dados['termos']):
                    areas_detectadas.add(area)
            
            area_principal = self._determinar_area_principal(areas_detectadas, conteudo)
            
            info = {
                'nome': nome_arquivo,
                'caminho': str(caminho_arquivo),
                'tipo': 'laboratorio_virtual',
                'area_principal': area_principal,
                'areas_detectadas': list(areas_detectadas),
                'equacoes_identificadas': equacoes_encontradas[:10],
                'descricao_cientifica': self._gerar_descricao_cientifica(area_principal, equacoes_encontradas),
                'linhas_codigo': conteudo.count('\n') + 1
            }
            
            # Atualizar estat√≠sticas
            if area_principal not in self.laboratorios_classificados:
                self.laboratorios_classificados[area_principal] = []
            self.laboratorios_classificados[area_principal].append(info)
            
            return info
            
        except:
            return None
    
    def _extrair_equacoes(self, conteudo):
        """Extrair equa√ß√µes matem√°ticas do conte√∫do"""
        equacoes = []
        
        # Padr√µes para equa√ß√µes matem√°ticas
        padroes_equacoes = [
            r'\\[\\[].*?\\[\\]]',  # LaTeX: \[ \]
            r'\$.*?\$',            # LaTeX: $ $
            r'œà|œÜ|Œ®',              # S√≠mbolos qu√¢nticos
            r'Œ±|Œ≤|Œ≥|Œ¥|Œµ',          # Letras gregas
            r'‚àë|‚à´|‚àè|‚àÇ',            # S√≠mbolos matem√°ticos
            r'[A-Z]_{[^}]+}',      # Subscritos
            r'[A-Z]^{[^}]+}',      # Sobrescritos
            r'\\frac{.*?}{.*?}',   # Fra√ß√µes LaTeX
            r'\\sqrt{.*?}',        # Ra√≠zes LaTeX
        ]
        
        for padrao in padroes_equacoes:
            matches = re.findall(padrao, conteudo)
            equacoes.extend(matches)
        
        return list(set(equacoes))[:20]  # Limitar a 20 equa√ß√µes √∫nicas
    
    def _determinar_area_principal(self, areas_detectadas, conteudo):
        """Determinar √°rea cient√≠fica principal"""
        if not areas_detectadas:
            return 'outros'
        
        # Contar ocorr√™ncias de termos por √°rea
        contagem_areas = {}
        for area in areas_detectadas:
            # Contar ocorr√™ncias de termos da √°rea no conte√∫do
            termos_area = [
                'qubit', 'quantum', 'molecule', 'protein', 
                'medical', 'cosmos', 'equation', 'algorithm'
            ]
            contagem = sum(conteudo.lower().count(termo) for termo in termos_area)
            contagem_areas[area] = contagem
        
        return max(contagem_areas, key=contagem_areas.get, default='outros')
    
    def _gerar_descricao_cientifica(self, area_principal, equacoes):
        """Gerar descri√ß√£o cient√≠fica baseada na √°rea e equa√ß√µes"""
        descricoes = {
            'fisica_quantica': f"Laborat√≥rio de F√≠sica Qu√¢ntica com {len(equacoes)} equa√ß√µes especializadas",
            'quimica_computacional': f"Laborat√≥rio de Qu√≠mica Computacional com {len(equacoes)} modelos moleculares",
            'biologia_molecular': f"Laborat√≥rio de Biologia Molecular com {len(equacoes)} equa√ß√µes bioqu√≠micas",
            'medicina_quantica': f"Laborat√≥rio de Medicina Qu√¢ntica com {len(equacoes)} modelos m√©dicos",
            'cosmologia': f"Laborat√≥rio de Cosmologia com {len(equacoes)} equa√ß√µes do universo",
            'matematica_avancada': f"Laborat√≥rio de Matem√°tica Avan√ßada com {len(equacoes)} teoremas",
            'computacao_avancada': f"Laborat√≥rio de Computa√ß√£o Avan√ßada com {len(equacoes)} algoritmos"
        }
        
        return descricoes.get(area_principal, f"Laborat√≥rio cient√≠fico com {len(equacoes)} equa√ß√µes identificadas")
    
    def gerar_relatorio_cientifico(self):
        """Gerar relat√≥rio cient√≠fico completo"""
        print(f"\n{'='*80}")
        print("üìä RELAT√ìRIO CIENT√çFICO - LABORAT√ìRIOS DA FUNDA√á√ÉO")
        print(f"{'='*80}")
        
        total_labs = sum(len(labs) for labs in self.laboratorios_classificados.values())
        total_equacoes = sum(len(lab['equacoes_identificadas']) for labs in self.laboratorios_classificados.values() for lab in labs)
        
        print(f"\nüåå VIS√ÉO GERAL CIENT√çFICA:")
        print(f"   ‚Ä¢ Laborat√≥rios classificados: {total_labs}")
        print(f"   ‚Ä¢ Equa√ß√µes identificadas: {total_equacoes}")
        print(f"   ‚Ä¢ √Åreas cient√≠ficas ativas: {len(self.laboratorios_classificados)}")
        
        print(f"\nüî¨ DISTRIBUI√á√ÉO POR √ÅREA CIENT√çFICA:")
        for area, laboratorios in sorted(self.laboratorios_classificados.items(), key=lambda x: len(x[1]), reverse=True):
            if laboratorios:
                equacoes_area = sum(len(lab['equacoes_identificadas']) for lab in laboratorios)
                print(f"   ‚Ä¢ {area.replace('_', ' ').title():25}: {len(laboratorios):3} labs | {equacoes_area:3} equa√ß√µes")
        
        print(f"\nüßÆ EQUA√á√ïES MAIS FREQUENTES:")
        todas_equacoes = []
        for laboratorios in self.laboratorios_classificados.values():
            for lab in laboratorios:
                todas_equacoes.extend(lab['equacoes_identificadas'])
        
        from collections import Counter
        equacoes_comuns = Counter(todas_equacoes).most_common(10)
        
        for equacao, frequencia in equacoes_comuns:
            print(f"   ‚Ä¢ {equacao:30} ‚Üí {frequencia:2} laborat√≥rios")
        
        print(f"\nüéØ LABORAT√ìRIOS MAIS ESPECIALIZADOS:")
        labs_especializados = []
        for area, laboratorios in self.laboratorios_classificados.items():
            for lab in laboratorios:
                if len(lab['equacoes_identificadas']) >= 5:  # Labs com pelo menos 5 equa√ß√µes
                    labs_especializados.append((lab['nome'], len(lab['equacoes_identificadas']), area))
        
        labs_especializados.sort(key=lambda x: x[1], reverse=True)
        for nome, num_equacoes, area in labs_especializados[:10]:
            print(f"   ‚Ä¢ {nome:40} ‚Üí {num_equacoes:2} equa√ß√µes ({area})")
        
        return {
            'total_laboratorios': total_labs,
            'total_equacoes': total_equacoes,
            'distribuicao_areas': {area: len(labs) for area, labs in self.laboratorios_classificados.items()},
            'equacoes_comuns': dict(equacoes_comuns),
            'laboratorios_especializados': labs_especializados[:10]
        }
    
    def exportar_catalogo_cientifico(self):
        """Exportar cat√°logo cient√≠fico completo"""
        print(f"\nüíæ EXPORTANDO CAT√ÅLOGO CIENT√çFICO...")
        
        relatorio = self.gerar_relatorio_cientifico()
        
        catalogo_cientifico = {
            'timestamp': datetime.now().isoformat(),
            'titulo': 'CAT√ÅLOGO CIENT√çFICO - LABORAT√ìRIOS DA FUNDA√á√ÉO ALQUIMISTA',
            'relatorio_geral': relatorio,
            'laboratorios_detalhados': self.laboratorios_classificados,
            'resumo_cientifico': {
                'diversidade_areas': len(self.laboratorios_classificados),
                'intensidade_matematica': relatorio['total_equacoes'] / relatorio['total_laboratorios'] if relatorio['total_laboratorios'] > 0 else 0,
                'areas_mais_ativas': [area for area, _ in sorted(relatorio['distribuicao_areas'].items(), key=lambda x: x[1], reverse=True)[:3]]
            }
        }
        
        # Salvar cat√°logo
        with open('CATALOGO_CIENTIFICO_LABORATORIOS.json', 'w', encoding='utf-8') as f:
            json.dump(catalogo_cientifico, f, indent=2, ensure_ascii=False)
        
        print("   ‚úÖ CATALOGO_CIENTIFICO_LABORATORIOS.json salvo!")
        
        # Gerar relat√≥rio em texto
        self._gerar_relatorio_cientifico_texto(catalogo_cientifico)
        
        return catalogo_cientifico
    
    def _gerar_relatorio_cientifico_texto(self, catalogo):
        """Gerar relat√≥rio cient√≠fico em texto"""
        with open('RELATORIO_CIENTIFICO_LABORATORIOS.txt', 'w', encoding='utf-8') as f:
            f.write("üî¨ RELAT√ìRIO CIENT√çFICO - LABORAT√ìRIOS DA FUNDA√á√ÉO\n")
            f.write("=" * 50 + "\n\n")
            
            f.write(f"üìä ESTAT√çSTICAS GERAIS:\n")
            f.write(f"‚Ä¢ Laborat√≥rios analisados: {catalogo['relatorio_geral']['total_laboratorios']}\n")
            f.write(f"‚Ä¢ Equa√ß√µes identificadas: {catalogo['relatorio_geral']['total_equacoes']}\n")
            f.write(f"‚Ä¢ √Åreas cient√≠ficas: {catalogo['resumo_cientifico']['diversidade_areas']}\n")
            f.write(f"‚Ä¢ Intensidade matem√°tica: {catalogo['resumo_cientifico']['intensidade_matematica']:.2f} eq/lab\n\n")
            
            f.write("üî¨ DISTRIBUI√á√ÉO POR √ÅREA:\n")
            for area, quantidade in catalogo['relatorio_geral']['distribuicao_areas'].items():
                f.write(f"‚Ä¢ {area.replace('_', ' ').title()}: {quantidade} laborat√≥rios\n")
            
            f.write("\nüßÆ EQUA√á√ïES MAIS COMUNS:\n")
            for equacao, frequencia in catalogo['relatorio_geral']['equacoes_comuns'].items():
                f.write(f"‚Ä¢ {equacao}: {frequencia} labs\n")
            
            f.write("\nüéØ LABORAT√ìRIOS MAIS ESPECIALIZADOS:\n")
            for nome, equacoes, area in catalogo['relatorio_geral']['laboratorios_especializados']:
                f.write(f"‚Ä¢ {nome}: {equacoes} equa√ß√µes ({area})\n")
        
        print("   ‚úÖ RELATORIO_CIENTIFICO_LABORATORIOS.txt salvo!")

def main():
    analisador = AnalisadorCientifico()
    
    # Executar an√°lise cient√≠fica
    labs_analisados, equacoes_encontradas = analisador.executar_analise_cientifica_completa()
    
    # Gerar relat√≥rio
    analisador.gerar_relatorio_cientifico()
    
    # Exportar cat√°logo
    catalogo = analisador.exportar_catalogo_cientifico()
    
    print(f"\nüî¨ AN√ÅLISE CIENT√çFICA CONCLU√çDA!")
    print(f"üìä {labs_analisados} laborat√≥rios classificados cientificamente!")
    print(f"üßÆ {equacoes_encontradas} equa√ß√µes matem√°ticas identificadas!")
    print(f"üéØ ESPECIALIDADES CIENT√çFICAS REVELADAS!")

if __name__ == "__main__":
    main()
