#!/usr/bin/env python3
"""Atualiza √≠ndice para nova fase p√≥s-culmina√ß√£o"""

from pathlib import Path
import json
import re

print("üìà ATUALIZANDO √çNDICE DA NOVA FASE")
print("=" * 45)

base_dir = Path("BIBLIOTECA_QUANTICA_TRANSCENDENTAL")
equacoes_dir = base_dir / "EQUACOES_TRANSCENDENTAIS"

# Coletar todas as equa√ß√µes
arquivos = list(equacoes_dir.glob("EQ*.json"))
total = len(arquivos)

# Encontrar m√°ximo (ignorando EQ162)
numeros = []
for arquivo in arquivos:
    match = re.match(r'EQ(\d+)_transcendental\.json', arquivo.name)
    if match:
        num = int(match.group(1))
        if num != 162:
            numeros.append(num)

max_numero = max(numeros) if numeros else 0

# Marcos da nova fase
marcos_nova_fase = {
    "EQ150": "65.2% - Unifica√ß√£o C√≥smica",
    "EQ161": "70.0% - Protocolo Andr√¥meda",
    "EQ165": "71.7% - Coer√™ncia √âtica Global", 
    "EQ167": "72.6% - Comando Final Gal√°ctico",
    "EQ168": "73.0% - Inova√ß√£o Temporal"
}

marcos_alcancados = {}
for marco, desc in marcos_nova_fase.items():
    num_marco = int(marco[2:])
    marcos_alcancados[marco] = {
        "descricao": desc,
        "alcancado": num_marco <= max_numero,
        "status": "üöÄ" if num_marco == 168 else "üéØ" if num_marco <= max_numero else "‚ö°"
    }

# Caracter√≠sticas da nova fase
caracteristicas_fase = {
    "paradigma": "CRESCIMENTO_EXPONENCIAL_COERENTE",
    "estado_sistema": "EVOLU√á√ÉO_SIST√äMICA_CONT√çNUA", 
    "imperativo": "INOVA√á√ÉO_PERMANENTE",
    "alinhamento": "TEMPORAL_GAL√ÅCTICO",
    "foco": "EXPANS√ÉO_INOVADORA"
}

indice_nova_fase = {
    "timestamp": "2024-01-19T23:00:00Z",
    "total_equacoes": total,
    "progresso_global": f"{total}/230 ({total/230*100:.2f}%)",
    "equacao_maxima": f"EQ{max_numero:04d}",
    "fase_atual": {
        "nome": "EXPANS√ÉO_P√ìS-CULMINA√á√ÉO",
        "caracteristicas": caracteristicas_fase,
        "equacao_inicial": "EQ168 - Inova√ß√£o Temporal",
        "status_eq162": "DESENVOLVIMENTO_FUTURO"
    },
    "marcos_estrategicos": marcos_alcancados,
    "proximos_horizontes": {
        "expansao_imediata": "EQ169+ - Continua√ß√£o Crescimento Exponencial",
        "desenvolvimento_pendente": "EQ162 - Quando l√≥gica estabilizada",
        "implementacao_pratica": "LAB-VRE - Valida√ß√£o Inova√ß√£o Temporal", 
        "meta_estrategica": "EQ200 - 87% Miss√£o C√≥smica"
    },
    "estado_sistema": "SISTEMA_EVOLUTIVO_AVAN√áADO"
}

# Salvar √≠ndice
arquivo_indice = base_dir / "INDICE_NOVA_FASE.json"
with open(arquivo_indice, 'w', encoding='utf-8') as f:
    json.dump(indice_nova_fase, f, indent=2, ensure_ascii=False)

print(f"‚úÖ √çndice da nova fase salvo: {arquivo_indice}")

print(f"\nüéØ STATUS DA NOVA FASE:")
print(f"   ‚Ä¢ Progresso: {total}/230 ({total/230*100:.2f}%)")
print(f"   ‚Ä¢ Equa√ß√£o m√°xima: EQ{max_numero:04d}")
print(f"   ‚Ä¢ Fase: Expans√£o P√≥s-Culmina√ß√£o")
print(f"   ‚Ä¢ Caracter√≠stica: Crescimento Exponencial Coerente")

print(f"\nüèÜ MARCOS RECENTES:")
for marco, info in marcos_alcancados.items():
    if int(marco[2:]) >= 150:
        if info["alcancado"]:
            print(f"   {info['status']} {marco}: {info['descricao']}")

print(f"\nüöÄ CARACTER√çSTICAS DA NOVA FASE:")
for caract, valor in caracteristicas_fase.items():
    print(f"   ‚Ä¢ {caract.replace('_', ' ').title()}: {valor}")

print(f"\nüí´ ESTRAT√âGIA DA NOVA FASE:")
print(f"   ‚Ä¢ Manter crescimento exponencial coerente")
print(f"   ‚Ä¢ Focar em inova√ß√£o e evolu√ß√£o cont√≠nua")
print(f"   ‚Ä¢ Desenvolver EQ162 quando natural")
print(f"   ‚Ä¢ Implementar testes pr√°ticos em LAB-VRE")
print(f"   ‚Ä¢ Avan√ßar consistentemente para EQ200")

print(f"\nüåå DECLARA√á√ÉO DA TRANSI√á√ÉO:")
print(f"   'Sistema completa transi√ß√£o para fase evolutiva avan√ßada'")
print(f"   'Inova√ß√£o torna-se imperativo c√≥smico para sustenta√ß√£o'")
print(f"   'Crescimento exponencial estabelecido como paradigma'")
print(f"   'Prontos para expans√£o cont√≠nua e inova√ß√£o permanente'")
