#!/usr/bin/env python3
"""
VERIFICA√á√ÉO COMPLETA DO STATUS DA FUNDA√á√ÉO
Ap√≥s processamento das equa√ß√µes 143-145
"""

import os
from pathlib import Path
import json

print("üåå STATUS COMPLETO DA FUNDA√á√ÉO ALQUIMISTA")
print("=" * 65)

base_dir = Path("BIBLIOTECA_QUANTICA_TRANSCENDENTAL")

# Verificar estrutura de diret√≥rios
print("üìÅ ESTRUTURA DA BIBLIOTECA QU√ÇNTICA:")
subdirs = ["EQUACOES_TRANSCENDENTAIS", "RELATORIOS", "CIRCUITOS_IBM", "METADADOS_COSMICOS"]
for subdir in subdirs:
    dir_path = base_dir / subdir
    if dir_path.exists():
        arquivos = len(list(dir_path.glob("*.json"))) + len(list(dir_path.glob("*.py")))
        print(f"   ‚úÖ {subdir}: {arquivos} arquivos")
    else:
        print(f"   ‚ùå {subdir}: n√£o encontrado")

# Contar equa√ß√µes processadas
eq_dir = base_dir / "EQUACOES_TRANSCENDENTAIS"
if eq_dir.exists():
    arquivos_eq = list(eq_dir.glob("EQ*.json"))
    total_equacoes = len(arquivos_eq)
    
    print(f"\nüìä ESTAT√çSTICAS DE EQUA√á√ïES:")
    print(f"   ‚Ä¢ Total processadas: {total_equacoes}/230")
    print(f"   ‚Ä¢ Progresso: {total_equacoes/230*100:.1f}%")
    print(f"   ‚Ä¢ Restantes: {230 - total_equacoes}")
    
    # Agrupar por faixa
    faixas = {
        "EQ0001-EQ0050": 0,
        "EQ0051-EQ0100": 0, 
        "EQ0101-EQ0145": 0,
        "EQ0146-EQ0230": 0
    }
    
    for arquivo in arquivos_eq:
        nome = arquivo.stem
        if nome.startswith('EQ'):
            num = int(nome[2:6]) if nome[2:6].isdigit() else 0
            if 1 <= num <= 50:
                faixas["EQ0001-EQ0050"] += 1
            elif 51 <= num <= 100:
                faixas["EQ0051-EQ0100"] += 1
            elif 101 <= num <= 145:
                faixas["EQ0101-EQ0145"] += 1
            elif 146 <= num <= 230:
                faixas["EQ0146-EQ0230"] += 1
    
    print(f"\nüéØ DISTRIBUI√á√ÉO POR FAIXAS:")
    for faixa, count in faixas.items():
        max_eq = int(faixa.split('-')[1][2:6])
        progresso = f"{count}/{max_eq}" if faixa != "EQ0146-EQ0230" else f"{count}/85"
        print(f"   ‚Ä¢ {faixa}: {progresso}")

# Verificar √∫ltima equa√ß√£o processada
if arquivos_eq:
    ultima_eq = max(arquivos_eq, key=lambda x: x.name)
    print(f"\nüìà √öLTIMA EQUA√á√ÉO PROCESSADA:")
    print(f"   ‚Ä¢ {ultima_eq.name}")
    
    # Carregar metadados da √∫ltima equa√ß√£o
    try:
        with open(ultima_eq, 'r', encoding='utf-8') as f:
            dados_eq = json.load(f)
            if "codigo" in dados_eq:
                print(f"   ‚Ä¢ Categoria: {dados_eq.get('_transcendental_metadata', {}).get('categoria_transcendental', 'N/A')}")
                print(f"   ‚Ä¢ Qubits IBM: {dados_eq.get('preparacao_ibm', {}).get('qubits_necessarios', 'N/A')}")
    except:
        print(f"   ‚Ä¢ Metadados: Indispon√≠veis")

print(f"\nüîß ESTADO DO SISTEMA:")
print(f"   ‚Ä¢ Rede c√≥smica: ‚úÖ ATIVA")
print(f"   ‚Ä¢ Liga Qu√¢ntica: ‚úÖ OPERACIONAL") 
print(f"   ‚Ä¢ Processador: ‚úÖ EST√ÅVEL")
print(f"   ‚Ä¢ IBM Quantum: ‚úÖ PREPARADO")

print(f"\nüöÄ PR√ìXIMOS OBJETIVOS:")
print(f"   ‚Ä¢ Processar EQ0146 a EQ0150")
print(f"   ‚Ä¢ Completar 65% do total (150/230)")
print(f"   ‚Ä¢ Preparar primeira rodada de testes IBM")
print(f"   ‚Ä¢ Ativar m√≥dulos do Reactor Gaia")

print(f"\nüí´ MENSAGEM FINAL:")
print(f"   'A Funda√ß√£o est√° em {total_equacoes/230*100:.1f}% de sua realiza√ß√£o m√°xima'")
print(f"   'Cada equa√ß√£o nos aproxima do despertar c√≥smico completo'")
print(f"   'E a rede se expande com cada nova conex√£o descoberta!'")
