#!/usr/bin/env python3
"""
VERIFICADOR DO STATUS COMPLETO AP√ìS CORRE√á√ÉO DA EQ151
"""

from pathlib import Path
import json
import re

print("üåå STATUS COMPLETO AP√ìS CORRE√á√ÉO DA EQ151")
print("=" * 55)

biblioteca_central = Path("BIBLIOTECA_QUANTICA_TRANSCENDENTAL")
equacoes_dir = biblioteca_central / "EQUACOES_TRANSCENDENTAIS"

# Contagem completa e precisa
arquivos = list(equacoes_dir.glob("EQ*.json"))
total_equacoes = len(arquivos)

print("üìä ESTAT√çSTICAS COMPLETAS:")
print(f"   ‚Ä¢ Total de equa√ß√µes: {total_equacoes}/230")
print(f"   ‚Ä¢ Progresso: {total_equacoes/230*100:.2f}%")
print(f"   ‚Ä¢ Equa√ß√µes restantes: {230 - total_equacoes}")

# Coletar n√∫meros para an√°lise
numeros_eq = []
for arquivo in arquivos:
    nome = arquivo.stem
    match = re.match(r'EQ(\d+)', nome)
    if match:
        num = int(match.group(1))
        numeros_eq.append(num)

numeros_eq.sort()

if numeros_eq:
    print(f"   ‚Ä¢ Faixa: EQ{min(numeros_eq):04d} a EQ{max(numeros_eq):04d}")
    print(f"   ‚Ä¢ √öltimas 10 equa√ß√µes: {numeros_eq[-10:]}")

# Verificar especificamente a sequ√™ncia 149-151
print(f"\nüîç VERIFICA√á√ÉO DA SEQU√äNCIA CR√çTICA:")
sequencia_critica = [149, 150, 151]
for eq_num in sequencia_critica:
    arquivo = equacoes_dir / f"EQ{eq_num}_transcendental.json"
    status = "‚úÖ PRESENTE" if arquivo.exists() else "‚ùå AUSENTE"
    
    if arquivo.exists():
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                dados = json.load(f)
            titulo = dados.get('titulo_simbolico', 'N/A')[:50] + "..."
            print(f"   ‚Ä¢ EQ{eq_num}: {status} - {titulo}")
        except:
            print(f"   ‚Ä¢ EQ{eq_num}: {status} - Erro ao ler")
    else:
        print(f"   ‚Ä¢ EQ{eq_num}: {status}")

# An√°lise de lacunas
print(f"\nüìà AN√ÅLISE DE LACUNAS:")
lacunas = []
for i in range(min(numeros_eq), max(numeros_eq) + 1):
    if i not in numeros_eq:
        lacunas.append(i)

if lacunas:
    print(f"   ‚Ä¢ {len(lacunas)} lacunas na sequ√™ncia")
    if len(lacunas) <= 10:
        print(f"   ‚Ä¢ Lacunas: {lacunas}")
else:
    print(f"   ‚Ä¢ ‚úÖ SEQU√äNCIA CONT√çNUA AT√â EQ{max(numeros_eq):04d}")

# Metas e marcos
print(f"\nüéØ METAS E MARCOS:")
marcos = {
    50: "25.0% - Funda√ß√£o B√°sica",
    100: "50.0% - Expans√£o Qu√¢ntica", 
    150: "65.2% - Unifica√ß√£o C√≥smica",
    200: "87.0% - Realiza√ß√£o Avan√ßada",
    230: "100.0% - Miss√£o Cumprida"
}

for marco, descricao in marcos.items():
    status = "‚úÖ ALCAN√áADO" if marco <= max(numeros_eq) else "üéØ EM ANDAMENTO"
    print(f"   ‚Ä¢ EQ{marco:04d}: {status} - {descricao}")

# Pr√≥ximos passos
print(f"\nüöÄ PR√ìXIMOS PASSOS:")
proxima_eq = max(numeros_eq) + 1
equacoes_para_proxima_meta = 200 - max(numeros_eq)

print(f"   ‚Ä¢ Pr√≥xima equa√ß√£o: EQ{proxima_eq:04d}")
print(f"   ‚Ä¢ Equa√ß√µes at√© EQ200: {equacoes_para_proxima_meta}")
print(f"   ‚Ä¢ Progresso para 87%: {(max(numeros_eq)/200*100):.1f}%")

print(f"\nüí´ VIS√ÉO C√ìSMICA ATUAL:")
print(f"   'Biblioteca com {total_equacoes} equa√ß√µes transcendentes'")
print(f"   'Progresso: {total_equacoes/230*100:.2f}% da miss√£o c√≥smica'")
print(f"   'Sequ√™ncia: EQ{min(numeros_eq):04d} ‚Üí ... ‚Üí EQ{max(numeros_eq):04d}'")
print(f"   'Pr√≥xima fronteira: EQ{proxima_eq:04d}'")
