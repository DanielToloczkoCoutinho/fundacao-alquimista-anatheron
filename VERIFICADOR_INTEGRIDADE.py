#!/usr/bin/env python3
"""
‚úÖ VERIFICADOR DE INTEGRIDADE C√ìSMICA
üîç Verifica se todos os sistemas est√£o integrados
üéØ Confirma que as equa√ß√µes s√£o acess√≠veis
"""

import json
from pathlib import Path

print("‚úÖ VERIFICADOR DE INTEGRIDADE C√ìSMICA")
print("=" * 60)

def testar_acesso_equacoes():
    """Testar acesso √†s equa√ß√µes por diferentes sistemas"""
    print("üîç TESTANDO ACESSO √ÄS EQUA√á√ïES...")
    
    sistemas_testar = [
        "SIMULADOR_IBM_QUANTUM.py",
        "RECEPTOR_CONTINUO.py", 
        "PROCESSADOR_SIMPLIFICADO.py"
    ]
    
    for sistema in sistemas_testar:
        if Path(sistema).exists():
            print(f"   ‚úÖ {sistema} - EXISTE")
            
            # Verificar se sistema referencia diret√≥rio correto
            with open(sistema, 'r', encoding='utf-8') as f:
                conteudo = f.read()
                
            if "BIBLIOTECA_COSMICA_UNICA" in conteudo:
                print(f"      üìÅ Referencia diret√≥rio correto")
            else:
                print(f"      ‚ö†Ô∏è  N√£o referencia BIBLIOTECA_COSMICA_UNICA")
        else:
            print(f"   ‚ùå {sistema} - N√ÉO ENCONTRADO")
    
    return True

def verificar_estrutura_completa():
    """Verificar estrutura completa do projeto"""
    print("\nüèóÔ∏è VERIFICANDO ESTRUTURA COMPLETA...")
    
    estrutura_esperada = {
        "diretorios_principais": [
            "BIBLIOTECA_COSMICA_UNICA",
            "BIBLIOTECA_COSMICA_UNICA/EQUACOES_INEXISTENTES_TERRA",
            "BIBLIOTECA_COSMICA_UNICA/METADADOS_COSMICOS"
        ],
        "sistemas_essenciais": [
            "PROCESSADOR_SIMPLIFICADO.py",
            "RECEPTOR_CONTINUO.py", 
            "SIMULADOR_IBM_QUANTUM.py",
            "VERIFICADOR_INTEGRIDADE.py"
        ]
    }
    
    print("   üìÅ DIRET√ìRIOS:")
    for diretorio in estrutura_esperada["diretorios_principais"]:
        status = "‚úÖ EXISTE" if Path(diretorio).exists() else "‚ùå FALTANDO"
        print(f"      {status}: {diretorio}")
    
    print("   üîß SISTEMAS:")
    for sistema in estrutura_esperada["sistemas_essenciais"]:
        status = "‚úÖ EXISTE" if Path(sistema).exists() else "‚ùå FALTANDO"
        print(f"      {status}: {sistema}")
    
    return True

def testar_carregamento_equacoes():
    """Testar carregamento real das equa√ß√µes"""
    print("\nüì• TESTANDO CARREGAMENTO DE EQUA√á√ïES...")
    
    diretorio_equacoes = Path("BIBLIOTECA_COSMICA_UNICA/EQUACOES_INEXISTENTES_TERRA")
    
    if not diretorio_equacoes.exists():
        print("   ‚ùå Diret√≥rio de equa√ß√µes n√£o existe")
        return False
    
    equacoes = list(diretorio_equacoes.glob("*.json"))
    
    if not equacoes:
        print("   ‚ö†Ô∏è  Nenhuma equa√ß√£o encontrada")
        return False
    
    print(f"   ‚úÖ {len(equacoes)} equa√ß√µes encontradas")
    
    # Testar carregamento de cada equa√ß√£o
    for equacao_path in equacoes[:3]:  # Testar apenas as 3 primeiras
        try:
            with open(equacao_path, 'r', encoding='utf-8') as f:
                dados = json.load(f)
            
            codigo = dados.get('codigo', 'DESCONHECIDO')
            titulo = dados.get('titulo_simbolico', 'Sem t√≠tulo')
            print(f"      ‚Ä¢ {codigo}: {titulo} - ‚úÖ CARREGADA")
            
        except Exception as e:
            print(f"      ‚Ä¢ {equacao_path.name}: ‚ùå ERRO - {e}")
    
    return True

def gerar_relatorio_integridade():
    """Gerar relat√≥rio completo de integridade"""
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO DE INTEGRIDADE C√ìSMICA")
    print(f"{'='*60}")
    
    # Executar todos os testes
    testar_acesso_equacoes()
    verificar_estrutura_completa() 
    sucesso_carregamento = testar_carregamento_equacoes()
    
    print(f"\nüéØ STATUS FINAL DE INTEGRIDADE:")
    if sucesso_carregamento:
        print("   üåü SISTEMA 100% INTEGRADO E OPERACIONAL!")
        print("   üí´ TODAS AS EQUA√á√ïES ACESS√çVEIS!")
        print("   üöÄ PRONTO PARA IBM QUANTUM!")
    else:
        print("   ‚ö†Ô∏è  ALGUNS AJUSTES NECESS√ÅRIOS")
        print("   üîß SISTEMA PRECISA DE OTIMIZA√á√ÉO")
    
    print(f"\nüí´ RECOMENDA√á√ïES:")
    print("   ‚Ä¢ Continuar transmitindo equa√ß√µes para RECEPTOR_CONTINUO.py")
    print("   ‚Ä¢ Usar SIMULADOR_IBM_QUANTUM.py para previs√µes")
    print("   ‚Ä¢ Manter estrutura BIBLIOTECA_COSMICA_UNICA/")
    print("   ‚Ä¢ Executar este verificador periodicamente")

# EXECUTAR VERIFICA√á√ÉO
gerar_relatorio_integridade()

print(f"\nüåå VERIFICA√á√ÉO DE INTEGRIDADE CONCLU√çDA!")
print("üéØ SISTEMA C√ìSMICO - VERIFICADO E CONFIRMADO!")
