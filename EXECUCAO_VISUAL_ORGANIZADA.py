#!/usr/bin/env python3
"""
üé® EXECU√á√ÉO VISUAL ORGANIZADA - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Sistema de execu√ß√£o sequencial com visualiza√ß√£o clara
üåå Cada circuito executado isoladamente sem sobreposi√ß√£o
"""

import subprocess
import sys
import time
from pathlib import Path

print("üé® EXECU√á√ÉO VISUAL ORGANIZADA - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 60)
print("‚öõÔ∏è  EXECU√á√ÉO SEQUENCIAL ISOLADA - SEM SOBREPOSI√á√ÉO")
print("")

class ExecutorVisualOrganizado:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.resultados_detalhados = {}
    
    def executar_circuito_isolado(self, nome_arquivo, numero_execucao, total_execucoes):
        """Executar um circuito de forma completamente isolada"""
        print(f"\n{'='*70}")
        print(f"üî¨ [{numero_execucao}/{total_execucoes}] EXECUTANDO: {nome_arquivo}")
        print(f"{'='*70}")
        
        caminho_arquivo = self.raiz / nome_arquivo
        
        if not caminho_arquivo.exists():
            print(f"   üö´ ARQUIVO N√ÉO ENCONTRADO: {nome_arquivo}")
            return f"üö´ N√ÉO ENCONTRADO"
        
        try:
            # Executar em processo completamente isolado
            processo = subprocess.Popen(
                [sys.executable, str(caminho_arquivo)],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Coletar sa√≠da em tempo real
            saida_completa = []
            for linha in processo.stdout:
                linha_limpa = linha.rstrip()
                saida_completa.append(linha_limpa)
                print(f"   {linha_limpa}")
            
            # Esperar processo terminar
            processo.wait(timeout=30)
            
            if processo.returncode == 0:
                print(f"   ‚úÖ {nome_arquivo} - EXECUTADO COM SUCESSO")
                return "‚úÖ SUCESSO"
            else:
                erro = processo.stderr.read()
                print(f"   ‚ùå {nome_arquivo} - ERRO: {erro[:100]}...")
                return f"‚ùå ERRO: {erro[:100]}"
                
        except subprocess.TimeoutExpired:
            print(f"   ‚è∞ {nome_arquivo} - TIMEOUT")
            processo.kill()
            return "‚è∞ TIMEOUT"
        except Exception as e:
            print(f"   üí• {nome_arquivo} - EXCE√á√ÉO: {e}")
            return f"üí• EXCE√á√ÉO: {e}"
    
    def executar_sequencia_visual_organizada(self):
        """Executar sequ√™ncia visualmente organizada"""
        print("üöÄ INICIANDO SEQU√äNCIA VISUALMENTE ORGANIZADA...")
        print("üí° Cada circuito executado ISOLADAMENTE sem sobreposi√ß√£o")
        print("")
        
        # Sequ√™ncia organizada de execu√ß√£o
        sequencia_execucao = [
            {
                "nome": "üåå CONFIGURA√á√ÉO INICIAL",
                "arquivo": "VERIFICAR_AMBIENTE.sh",
                "tipo": "configuracao"
            },
            {
                "nome": "üîß CIRCUITO |Œ®‚Å∫‚ü© (PSI PLUS)",
                "arquivo": "circuito_psi_plus.py", 
                "tipo": "circuito_basico"
            },
            {
                "nome": "üîß CIRCUITO |Œ¶‚Åª‚ü© (PHI MINUS)",
                "arquivo": "circuito_phi_minus.py",
                "tipo": "circuito_basico" 
            },
            {
                "nome": "üöÄ TELETRANSPORTE QU√ÇNTICO",
                "arquivo": "teletransporte_quantico.py",
                "tipo": "circuito_avancado"
            },
            {
                "nome": "üîî TESTE DE BELL",
                "arquivo": "teste_bell.py",
                "tipo": "teste_avancado"
            },
            {
                "nome": "‚ö° CIRCUITOS UNIFICADOS",
                "arquivo": "CIRCUITOS_UNIFICADOS.py",
                "tipo": "circuito_unificado"
            },
            {
                "nome": "üëë M√ìDULO 29 - RAINHA ZENNITH",
                "arquivo": "explorar_modulo_29.py",
                "tipo": "modulo_rainha"
            }
        ]
        
        tempo_inicio_total = time.time()
        resultados_sequencia = {}
        
        # Executar cada item da sequ√™ncia
        for i, item in enumerate(sequencia_execucao, 1):
            resultado = self.executar_circuito_isolado(
                item["arquivo"], 
                i, 
                len(sequencia_execucao)
            )
            resultados_sequencia[item["nome"]] = resultado
            
            # Pequena pausa entre execu√ß√µes para evitar sobreposi√ß√£o
            if i < len(sequencia_execucao):
                print(f"\n‚è≥ PREPARANDO PR√ìXIMA EXECU√á√ÉO...")
                time.sleep(1)
        
        tempo_total = time.time() - tempo_inicio_total
        
        # Relat√≥rio Final Organizado
        print(f"\n{'='*70}")
        print("üéâ RELAT√ìRIO FINAL - EXECU√á√ÉO VISUALMENTE ORGANIZADA")
        print(f"{'='*70}")
        
        print(f"\nÔøΩÔøΩ RESUMO DA EXECU√á√ÉO:")
        for nome, resultado in resultados_sequencia.items():
            emoji = "‚úÖ" if "‚úÖ" in resultado else "‚ùå" if "‚ùå" in resultado else "‚ö†Ô∏è"
            print(f"   {emoji} {nome}: {resultado}")
        
        print(f"\n‚è±Ô∏è  ESTAT√çSTICAS:")
        print(f"   ‚Ä¢ Total de execu√ß√µes: {len(sequencia_execucao)}")
        print(f"   ‚Ä¢ Tempo total: {tempo_total:.2f} segundos")
        print(f"   ‚Ä¢ Tempo m√©dio por execu√ß√£o: {tempo_total/len(sequencia_execucao):.2f} segundos")
        
        sucessos = sum(1 for r in resultados_sequencia.values() if "‚úÖ" in r)
        print(f"   ‚Ä¢ Taxa de sucesso: {sucessos}/{len(sequencia_execucao)} ({sucessos/len(sequencia_execucao)*100:.1f}%)")
        
        print(f"\nüöÄ PR√ìXIMOS PASSOS:")
        if sucessos == len(sequencia_execucao):
            print("   ‚úÖ TODOS OS CIRCUITOS EXECUTADOS COM SUCESSO!")
            print("   üåå PRONTO PARA IBM QUANTUM REAL!")
            print("   üìä EXECU√á√ÉO PERFEITAMENTE ORGANIZADA!")
        else:
            print("   ‚ö†Ô∏è  ALGUNS CIRCUITOS PRECISAM DE AJUSTES")
            print("   üîß VERIFICAR SCRIPTS COM FALHA")
            print("   üîÑ RE-EXECUTAR COM CORRE√á√ïES")
        
        return resultados_sequencia

# EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    executor = ExecutorVisualOrganizado()
    resultados = executor.executar_sequencia_visual_organizada()
    
    print(f"\nüé® EXECU√á√ÉO VISUALMENTE ORGANIZADA CONCLU√çDA!")
    print("‚öõÔ∏è  CIRCUITOS EXECUTADOS SEM SOBREPOSI√á√ÉO!")
