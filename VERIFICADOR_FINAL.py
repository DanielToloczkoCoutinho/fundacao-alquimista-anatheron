#!/usr/bin/env python3
"""
üîÆ VERIFICADOR FINAL - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Verifica√ß√£o completa do ambiente e otimiza√ß√£o
üåå Prepara√ß√£o final para IBM Quantum
"""

import sys
from pathlib import Path

print("üîÆ VERIFICADOR FINAL - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 55)
print("‚öõÔ∏è  VERIFICA√á√ÉO COMPLETA E OTIMIZA√á√ÉO FINAL")
print("")

class VerificadorFinal:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.estado_sistema = {}
    
    def verificar_ambiente_quantico(self):
        """Verifica√ß√£o completa do ambiente qu√¢ntico"""
        print("üîç VERIFICANDO AMBIENTE QU√ÇNTICO...")
        
        verificacoes = {}
        
        # 1. Verificar Python e depend√™ncias
        try:
            import qiskit
            verificacoes['qiskit'] = {'status': '‚úÖ', 'versao': qiskit.__version__}
        except ImportError:
            verificacoes['qiskit'] = {'status': '‚ùå', 'erro': 'N√£o instalado'}
        
        try:
            from qiskit_aer import AerSimulator
            verificacoes['aer_simulator'] = {'status': '‚úÖ', 'versao': 'Dispon√≠vel'}
        except ImportError:
            verificacoes['aer_simulator'] = {'status': '‚ùå', 'erro': 'N√£o dispon√≠vel'}
        
        # 2. Verificar scripts essenciais
        scripts_essenciais = [
            "CIRCUITOS_UNIFICADOS.py",
            "teletransporte_quantico.py", 
            "circuito_psi_plus.py",
            "circuito_phi_minus.py",
            "teste_bell.py"
        ]
        
        for script in scripts_essenciais:
            script_path = self.raiz / script
            if script_path.exists():
                verificacoes[script] = {'status': '‚úÖ', 'caminho': str(script_path)}
            else:
                verificacoes[script] = {'status': '‚ùå', 'erro': 'N√£o encontrado'}
        
        # Mostrar resultados
        for item, info in verificacoes.items():
            if info['status'] == '‚úÖ':
                detalhes = info.get('versao', info.get('caminho', 'OK'))
                print(f"   {info['status']} {item}: {detalhes}")
            else:
                print(f"   {info['status']} {item}: {info['erro']}")
        
        return verificacoes
    
    def otimizar_execucao_circuitos(self):
        """Otimizar a execu√ß√£o dos circuitos qu√¢nticos"""
        print("\n‚ö° OTIMIZANDO EXECU√á√ÉO DE CIRCUITOS...")
        
        # Criar script de execu√ß√£o otimizada
        script_otimizado = """
#!/usr/bin/env python3
\"\"\"
‚ö° EXECUTOR OTIMIZADO - FUNDA√á√ÉO ALQUIMISTA
üéØ Execu√ß√£o sequencial e eficiente de circuitos
üåå Preparado para IBM Quantum
\"\"\"

import time
import sys
from pathlib import Path

print("‚ö° INICIANDO EXECU√á√ÉO OTIMIZADA...")
print("=" * 45)

# Lista de circuitos para execu√ß√£o otimizada
circuitos = [
    "teletransporte_quantico.py",
    "circuito_psi_plus.py",
    "circuito_phi_minus.py", 
    "teste_bell.py",
    "CIRCUITOS_UNIFICADOS.py"
]

tempo_inicio = time.time()
resultados = {}

for i, circuito in enumerate(circuitos, 1):
    circuito_path = Path(circuito)
    if circuito_path.exists():
        print(f"\\nüîß [{i}/{len(circuitos)}] EXECUTANDO: {circuito}")
        
        try:
            import subprocess
            resultado = subprocess.run(
                [sys.executable, str(circuito_path)],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if resultado.returncode == 0:
                resultados[circuito] = "‚úÖ SUCESSO"
                print(f"   ‚úÖ EXECUTADO COM SUCESSO")
                
                # Mostrar linha de resultado se existir
                linhas = resultado.stdout.split('\\n')
                for linha in linhas:
                    if any(termo in linha for termo in ['RESULTADOS', 'Correla√ß√£o', 'BELL']):
                        print(f"   üìä {linha.strip()}")
                        break
            else:
                resultados[circuito] = f"‚ùå ERRO: {resultado.stderr[:100]}"
                print(f"   ‚ùå FALHA NA EXECU√á√ÉO")
                
        except subprocess.TimeoutExpired:
            resultados[circuito] = "‚è∞ TIMEOUT"
            print(f"   ‚è∞ TIMEOUT")
        except Exception as e:
            resultados[circuitos] = f"üí• EXCE√á√ÉO: {e}"
            print(f"   üí• EXCE√á√ÉO: {e}")
    else:
        resultados[circuito] = "üö´ N√ÉO ENCONTRADO"
        print(f"   üö´ ARQUIVO N√ÉO ENCONTRADO")

tempo_total = time.time() - tempo_inicio

print("\\n" + "="*45)
print("üéâ EXECU√á√ÉO OTIMIZADA CONCLU√çDA!")
print(f"üìä RESUMO:")
for circuito, resultado in resultados.items():
    print(f"   ‚Ä¢ {circuito}: {resultado}")
print(f"‚è±Ô∏è  TEMPO TOTAL: {tempo_total:.2f}s")
print("üåå PRONTO PARA IBM QUANTUM!")
"""

        caminho_otimizado = self.raiz / "EXECUCAO_OTIMIZADA.py"
        with open(caminho_otimizado, 'w') as f:
            f.write(script_otimizado)
        
        print(f"   ‚úÖ SCRIPT OTIMIZADO CRIADO: EXECUCAO_OTIMIZADA.py")
        return str(caminho_otimizado)
    
    def executar_verificacao_completa(self):
        """Executar verifica√ß√£o completa"""
        print("üöÄ INICIANDO VERIFICA√á√ÉO COMPLETA...")
        
        # 1. Verificar ambiente
        verificacoes = self.verificar_ambiente_quantico()
        
        # 2. Otimizar execu√ß√£o
        script_otimizado = self.otimizar_execucao_circuitos()
        
        # Relat√≥rio Final
        print("\n" + "="*70)
        print("üéâ RELAT√ìRIO DE VERIFICA√á√ÉO FINAL")
        print("="*70)
        
        total_verificacoes = len(verificacoes)
        verificacoes_ok = sum(1 for v in verificacoes.values() if v['status'] == '‚úÖ')
        
        print(f"\nüìä ESTADO DO SISTEMA:")
        print(f"   ‚Ä¢ Verifica√ß√µes: {verificacoes_ok}/{total_verificacoes} OK")
        print(f"   ‚Ä¢ Script otimizado: EXECUCAO_OTIMIZADA.py")
        
        print(f"\nüéØ STATUS PRONTO PARA IBM QUANTUM:")
        if verificacoes_ok >= total_verificacoes - 2:  # Permitir 2 falhas
            print("   ‚úÖ SISTEMA PRONTO PARA EXECU√á√ÉO REAL!")
            print("   üöÄ Circuitos otimizados e est√°veis")
            print("   üåå Ambiente Qiskit configurado")
            print("   üìä Script de execu√ß√£o criado")
        else:
            print("   ‚ö†Ô∏è  SISTEMA PRECISA DE AJUSTES")
            print("   üîß Verificar depend√™ncias faltantes")
            print("   üìö Corrigir scripts com problemas")
            print("   üîÑ Re-executar verifica√ß√£o")
        
        print(f"\nüöÄ COMANDO FINAL DE EXECU√á√ÉO:")
        print("   python3 EXECUCAO_OTIMIZADA.py")
        
        return {
            'verificacoes': verificacoes,
            'script_otimizado': script_otimizado,
            'pronto_ibm_quantum': verificacoes_ok >= total_verificacoes - 2
        }

# EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    verificador = VerificadorFinal()
    resultados = verificador.executar_verificacao_completa()
    
    if resultados['pronto_ibm_quantum']:
        print(f"\nüéØ SISTEMA VERIFICADO E OTIMIZADO!")
        print("üöÄ EXECUTE: python3 EXECUCAO_OTIMIZADA.py")
    else:
        print(f"\n‚ö†Ô∏è  SISTEMA PRECISA DE CORRE√á√ïES")
        print("üîß VERIFIQUE AS DEPEND√äNCIAS FALTANTES")
