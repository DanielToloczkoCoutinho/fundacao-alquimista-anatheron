#!/usr/bin/env python3
"""
üéØ FILTRO INTELIGENTE - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Sistema avan√ßado de filtragem para 590 laborat√≥rios
üåå Foco em: M√≥dulos Rainha, Equa√ß√µes Reais, Hierarquia Estrutural
"""

import os
import re
from pathlib import Path

print("üéØ FILTRO INTELIGENTE - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 60)
print("‚öõÔ∏è  FILTRANDO 590 LABORAT√ìRIOS PARA ENCONTRAR OS ESSENCIAIS")
print("üåå FOCO: M√ìDULOS RAINHA, EQUA√á√ïES REAIS, HIERARQUIA")
print("")

class FiltroInteligente:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.resultados_filtrados = {
            'modulos_rainha': [],
            'equacoes_reais': [],
            'laboratorios_quanticos_essenciais': [],
            'nexus_conexoes': [],
            'hierarquia_estrutural': []
        }
    
    def filtrar_modulos_rainha(self):
        """Filtrar m√≥dulos da Rainha com padr√µes inteligentes"""
        print("üîç FILTRANDO M√ìDULOS RAINHA (padr√µes m√∫ltiplos)...")
        
        # Padr√µes INTELIGENTES para m√≥dulos Rainha
        padroes_modulos = [
            # Padr√£o 1: modulo-9, modulo_9, mod9, m9
            r'.*(modulo[-_]?9|mod9|m9).*',
            # Padr√£o 2: modulo-29, modulo_29, mod29, m29  
            r'.*(modulo[-_]?29|mod29|m29).*',
            # Padr√£o 3: zennith, rainha
            r'.*(zennith|rainha).*',
            # Padr√£o 4: omega
            r'.*omega.*',
            # Padr√£o 5: nexus
            r'.*nexus.*'
        ]
        
        modulos_encontrados = []
        for raiz, dirs, arquivos in os.walk(self.raiz):
            for item in dirs + arquivos:
                item_path = Path(raiz) / item
                
                # Verificar TODOS os padr√µes
                for padrao in padroes_modulos:
                    if re.match(padrao, item, re.IGNORECASE):
                        modulos_encontrados.append(item_path)
                        print(f"   ‚úÖ M√ìDULO ENCONTRADO: {item_path}")
                        break  # Evitar duplicatas
        
        return modulos_encontrados
    
    def filtrar_equacoes_reais(self):
        """Filtrar equa√ß√µes REAIS (n√£o bibliotecas node_modules)"""
        print("üîç FILTRANDO EQUA√á√ïES REAIS (excluindo node_modules)...")
        
        # Extens√µes de arquivos com equa√ß√µes reais
        extensoes_equacoes = ['.py', '.js', '.ts', '.md', '.txt', '.json']
        
        equacoes_reais = []
        for raiz, dirs, arquivos in os.walk(self.raiz):
            # PULAR node_modules - isso elimina 90% do ru√≠do!
            if 'node_modules' in raiz:
                continue
                
            for arquivo in arquivos:
                if any(arquivo.endswith(ext) for ext in extensoes_equacoes):
                    caminho_completo = Path(raiz) / arquivo
                    
                    # Ler conte√∫do para verificar se tem equa√ß√µes REAIS
                    try:
                        with open(caminho_completo, 'r', encoding='utf-8') as f:
                            conteudo = f.read()
                            
                        # Verificar se tem equa√ß√µes matem√°ticas ou c√≥digo qu√¢ntico
                        if self.contem_equacoes_reais(conteudo):
                            equacoes_reais.append(caminho_completo)
                            print(f"   ‚úÖ EQUA√á√ÉO REAL: {caminho_completo}")
                    except:
                        pass
        
        return equacoes_reais
    
    def contem_equacoes_reais(self, conteudo):
        """Verificar se o conte√∫do cont√©m equa√ß√µes REAIS"""
        indicadores_equacoes = [
            'import numpy', 'import math', 'def ', 'class ',
            'QuantumCircuit', 'qiskit', 'AerSimulator',
            'np.', 'math.', '= lambda', 'return '
        ]
        
        # Verificar m√∫ltiplos indicadores
        indicadores_encontrados = sum(1 for indicador in indicadores_equacoes 
                                    if indicador in conteudo)
        
        return indicadores_encontrados >= 2  # Pelo menos 2 indicadores
    
    def filtrar_laboratorios_quanticos_essenciais(self):
        """Filtrar laborat√≥rios qu√¢nticos ESSENCIAIS"""
        print("üîç FILTRANDO LABORAT√ìRIOS QU√ÇNTICOS ESSENCIAIS...")
        
        laboratorios_essenciais = []
        
        # Procurar nos diret√≥rios PRINCIPAIS (n√£o em node_modules)
        diretorios_principais = ['laboratorios', 'scripts', 'src', 'app', '.']
        
        for dir_principal in diretorios_principais:
            dir_path = self.raiz / dir_principal
            if dir_path.exists():
                for item in dir_path.rglob('*'):
                    if item.is_file():
                        nome_lower = item.name.lower()
                        
                        # Verificar se √© laborat√≥rio qu√¢ntico ESSENCIAL
                        if self.e_laboratorio_quantico_essencial(item):
                            laboratorios_essenciais.append(item)
                            print(f"   ‚úÖ LAB QU√ÇNTICO ESSENCIAL: {item}")
        
        return laboratorios_essenciais
    
    def e_laboratorio_quantico_essencial(self, caminho):
        """Verificar se √© um laborat√≥rio qu√¢ntico ESSENCIAL"""
        nome = caminho.name.lower()
        
        # Padr√µes de laborat√≥rios qu√¢nticos ESSENCIAIS
        padroes_essenciais = [
            'quant', 'qiskit', 'quantum', 'circuit', 'qubit',
            'bell', 'teleport', 'algoritmo', 'algorithm',
            'simulacao', 'simulation', 'experiment', 'teste'
        ]
        
        # Verificar se cont√©m padr√µes essenciais E n√£o est√° em node_modules
        return (any(padrao in nome for padrao in padroes_essenciais) 
                and 'node_modules' not in str(caminho))
    
    def filtrar_nexus_conexoes(self):
        """Filtrar conex√µes de Nexus e pontos centrais"""
        print("üîç FILTRANDO NEXUS E CONEX√ïES CENTRAIS...")
        
        nexus_conexoes = []
        
        # Procurar arquivos de conex√£o e configura√ß√£o
        padroes_nexus = [
            'nexus', 'conexao', 'connection', 'hub', 'central',
            'config', 'configuration', 'setup', 'organizacao'
        ]
        
        for raiz, dirs, arquivos in os.walk(self.raiz):
            if 'node_modules' in raiz:
                continue
                
            for arquivo in arquivos:
                arquivo_lower = arquivo.lower()
                if any(padrao in arquivo_lower for padrao in padroes_nexus):
                    caminho = Path(raiz) / arquivo
                    nexus_conexoes.append(caminho)
                    print(f"   ‚úÖ NEXUS/CONEX√ÉO: {caminho}")
        
        return nexus_conexoes
    
    def executar_filtragem_inteligente(self):
        """Executar filtragem inteligente completa"""
        print("üöÄ INICIANDO FILTRAGEM INTELIGENTE COMPLETA...")
        print("üí° Eliminando ru√≠do (node_modules, arquivos irrelevantes)")
        print("")
        
        # Executar todos os filtros
        self.resultados_filtrados['modulos_rainha'] = self.filtrar_modulos_rainha()
        self.resultados_filtrados['equacoes_reais'] = self.filtrar_equacoes_reais()
        self.resultados_filtrados['laboratorios_quanticos_essenciais'] = self.filtrar_laboratorios_quanticos_essenciais()
        self.resultados_filtrados['nexus_conexoes'] = self.filtrar_nexus_conexoes()
        
        # Relat√≥rio Final FILTRADO
        print("\n" + "="*70)
        print("üéâ RELAT√ìRIO FILTRADO - FUNDA√á√ÉO ALQUIMISTA")
        print("="*70)
        
        total_filtrado = sum(len(items) for items in self.resultados_filtrados.values())
        print(f"\nÔøΩÔøΩ RESUMO FILTRADO (eliminando ru√≠do):")
        print(f"   ‚Ä¢ De 590 laborat√≥rios para {total_filtrado} ESSENCIAIS")
        print(f"   ‚Ä¢ Redu√ß√£o de {((590 - total_filtrado) / 590 * 100):.1f}% de ru√≠do")
        
        print(f"\nüéØ CATEGORIAS ESSENCIAIS IDENTIFICADAS:")
        for categoria, itens in self.resultados_filtrados.items():
            print(f"   ‚Ä¢ {categoria.upper():30} : {len(itens):3d} itens")
        
        print(f"\nüåå PRINCIPAIS DESCOBERTAS FILTRADAS:")
        
        # Mostrar exemplos de cada categoria
        for categoria, itens in self.resultados_filtrados.items():
            if itens:
                print(f"\n   üìÅ {categoria.upper()}:")
                for item in itens[:3]:  # Mostrar apenas 3 por categoria
                    print(f"      ‚Ä¢ {item.name}")
        
        print(f"\nüöÄ PR√ìXIMOS PASSOS COM DADOS FILTRADOS:")
        print("   1. Organizar hierarquia com dados limpos")
        print("   2. Conectar m√≥dulos Rainha identificados")
        print("   3. Implementar equa√ß√µes reais para IBM Quantum")
        print("   4. Estabelecer fluxo com laborat√≥rios essenciais")
        
        return self.resultados_filtrados

# EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    filtro = FiltroInteligente()
    resultados = filtro.executar_filtragem_inteligente()
    
    print(f"\nüéØ FILTRAGEM INTELIGENTE CONCLU√çDA!")
    print(f"üåå {sum(len(items) for items in resultados.values())} itens ESSENCIAIS identificados!")
