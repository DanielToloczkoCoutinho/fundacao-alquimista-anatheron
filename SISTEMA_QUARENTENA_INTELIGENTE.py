#!/usr/bin/env python3
"""
üíæ SISTEMA DE QUARENTENA INTELIGENTE - FUNDA√á√ÉO ALQUIMISTA
‚öõÔ∏è Gest√£o estrat√©gica de armazenamento e organiza√ß√£o
üåå Sistema de rota√ß√£o e arquivamento inteligente
"""

import shutil
from pathlib import Path
from datetime import datetime
import json

print("üíæ SISTEMA DE QUARENTENA INTELIGENTE - FUNDA√á√ÉO ALQUIMISTA")
print("=" * 70)
print("‚öõÔ∏è  GEST√ÉO ESTRAT√âGICA DE ARMAZENAMENTO E ORGANIZA√á√ÉO")
print("")

class SistemaQuarentena:
    def __init__(self):
        self.raiz = Path(".").absolute()
        self.diretorio_quarentena = self.raiz / "QUARENTENA_INTELIGENTE"
        self.metricas_quarentena = {}
    
    def criar_estrutura_quarentena(self):
        """Criar estrutura de quarentena organizada"""
        print("üèóÔ∏è CRIANDO ESTRUTURA DE QUARENTENA INTELIGENTE...")
        
        estruturas = [
            "LABORATORIOS_ARQUIVADOS",
            "SCRIPTS_INATIVOS", 
            "DADOS_COMPACTADOS",
            "RELATORIOS_CONSOLIDADOS",
            "BACKUP_ESTRATIFICADO",
            "METADADOS_CATALOGO"
        ]
        
        for estrutura in estruturas:
            caminho = self.diretorio_quarentena / estrutura
            caminho.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ {estrutura}")
        
        return estruturas
    
    def analisar_uso_armazenamento(self):
        """Analisar uso atual de armazenamento"""
        print("\nüìä ANALISANDO USO DE ARMAZENAMENTO...")
        
        total_tamanho = 0
        distribuicao = {}
        
        for item in self.raiz.rglob('*'):
            if item.is_file():
                extensao = item.suffix.lower() or 'sem_extensao'
                tamanho = item.stat().st_size
                total_tamanho += tamanho
                
                if extensao not in distribuicao:
                    distribuicao[extensao] = {'count': 0, 'size': 0}
                
                distribuicao[extensao]['count'] += 1
                distribuicao[extensao]['size'] += tamanho
        
        # Converter para GB
        total_gb = total_tamanho / (1024**3)
        
        print(f"   üíæ USO TOTAL: {total_gb:.2f} GB")
        
        # Mostrar maiores consumidores
        maiores_consumidores = sorted(distribuicao.items(), 
                                    key=lambda x: x[1]['size'], 
                                    reverse=True)[:10]
        
        print(f"\n   üìà MAIORES CONSUMIDORES:")
        for extensao, dados in maiores_consumidores:
            tamanho_gb = dados['size'] / (1024**3)
            print(f"      ‚Ä¢ {extensao:10}: {tamanho_gb:6.2f} GB ({dados['count']:5} arquivos)")
        
        self.metricas_quarentena['uso_armazenamento'] = {
            'total_gb': total_gb,
            'distribuicao': distribuicao,
            'timestamp': datetime.now().isoformat()
        }
        
        return total_gb, distribuicao
    
    def identificar_candidatos_quarentena(self):
        """Identificar candidatos para quarentena"""
        print("\nüîç IDENTIFICANDO CANDIDATOS PARA QUARENTENA...")
        
        criterios_quarentena = [
            ('*.log', 'Arquivos de log antigos'),
            ('*.tmp', 'Arquivos tempor√°rios'),
            ('*.bak', 'Backups antigos'),
            ('*_old.*', 'Vers√µes antigas de arquivos'),
            ('*backup_*', 'Backups autom√°ticos'),
            ('*node_modules*', 'Depend√™ncias Node.js'),
            ('*__pycache__*', 'Cache Python'),
            ('*.git*', 'Metadados Git (exceto .git/)')
        ]
        
        candidatos = []
        
        for padrao, descricao in criterios_quarentena:
            arquivos_encontrados = list(self.raiz.rglob(padrao))
            if arquivos_encontrados:
                tamanho_total = sum(f.stat().st_size for f in arquivos_encontrados if f.is_file())
                candidatos.append({
                    'padrao': padrao,
                    'descricao': descricao,
                    'arquivos': len(arquivos_encontrados),
                    'tamanho_total_gb': tamanho_total / (1024**3),
                    'exemplos': [str(f) for f in arquivos_encontrados[:3]]
                })
        
        print(f"   üìã {len(candidatos)} CATEGORIAS IDENTIFICADAS:")
        
        espaco_liberar = 0
        for candidato in candidatos:
            print(f"      ‚Ä¢ {candidato['descricao']:30} ‚Üí {candidato['tamanho_total_gb']:.2f} GB")
            espaco_liberar += candidato['tamanho_total_gb']
        
        print(f"\n   üí∞ ESPA√áO POTENCIAL A LIBERAR: {espaco_liberar:.2f} GB")
        
        self.metricas_quarentena['candidatos'] = candidatos
        return candidatos, espaco_liberar
    
    def criar_plano_otimizacao(self, total_armazenamento, candidatos):
        """Criar plano de otimiza√ß√£o estrat√©gica"""
        print(f"\n{'='*80}")
        print("üéØ PLANO DE OTIMIZA√á√ÉO ESTRAT√âGICA - ARMAZENAMENTO")
        print(f"{'='*80}")
        
        espaco_potencial = sum(c['tamanho_total_gb'] for c in candidatos)
        percentual_otimizacao = (espaco_potencial / total_armazenamento) * 100
        
        print(f"\nüìä DIAGN√ìSTICO ATUAL:")
        print(f"   ‚Ä¢ Armazenamento total: {total_armazenamento:.2f} GB")
        print(f"   ‚Ä¢ Espa√ßo potencial a liberar: {espaco_potencial:.2f} GB")
        print(f"   ‚Ä¢ Percentual de otimiza√ß√£o: {percentual_otimizacao:.1f}%")
        
        print(f"\nüöÄ ESTRAT√âGIA DE OTIMIZA√á√ÉO:")
        
        estrategia = [
            "FASE 1: LIMPEZA IMEDIATA (0-30 dias)",
            "   ‚Ä¢ Arquivos tempor√°rios e cache",
            "   ‚Ä¢ Logs antigos (>30 dias)",
            "   ‚Ä¢ Backups redundantes",
            "",
            "FASE 2: ORGANIZA√á√ÉO ESTRUTURAL (30-60 dias)", 
            "   ‚Ä¢ Categoriza√ß√£o de laborat√≥rios",
            "   ‚Ä¢ Arquivos de dados otimizados",
            "   ‚Ä¢ Compacta√ß√£o inteligente",
            "",
            "FASE 3: OTIMIZA√á√ÉO AVAN√áADA (60-90 dias)",
            "   ‚Ä¢ Sistema de rota√ß√£o autom√°tica",
            "   ‚Ä¢ Compress√£o adaptativa",
            "   ‚Ä¢ Armazenamento em nuvem estrat√©gico"
        ]
        
        for linha in estrategia:
            print(f"   {linha}")
        
        print(f"\nüí° RECOMENDA√á√ïES IMEDIATAS:")
        recomendacoes = [
            f"‚Ä¢ üóëÔ∏è  LIMPAR {candidatos[0]['tamanho_total_gb']:.2f} GB em {candidatos[0]['descricao']}",
            f"‚Ä¢ üì¶ COMPACTAR dados de laborat√≥rios inativos",
            f"‚Ä¢ üîÑ IMPLEMENTAR rota√ß√£o de logs autom√°tica",
            f"‚Ä¢ üíæ ESTABELECER pol√≠tica de reten√ß√£o de backups",
            f"‚Ä¢ üìä MONITORAR crescimento do armazenamento"
        ]
        
        for recomendacao in recomendacoes:
            print(f"   {recomendacao}")
        
        return {
            'espaco_total': total_armazenamento,
            'espaco_liberar': espaco_potencial,
            'percentual_otimizacao': percentual_otimizacao,
            'estrategia_implementada': True
        }
    
    def executar_plano_seguro(self):
        """Executar plano de otimiza√ß√£o de forma segura"""
        print(f"\nüõ°Ô∏è EXECUTANDO PLANO DE OTIMIZA√á√ÉO SEGURO...")
        
        # Criar estrutura primeiro
        self.criar_estrutura_quarentena()
        
        # Apenas simula√ß√£o por seguran√ßa
        print("   üîí MODO SEGURO ATIVADO - Apenas simula√ß√£o")
        print("   üìã A√ß√µes que seriam executadas:")
        
        acoes_simuladas = [
            "‚Ä¢ üìÅ Criar estrutura de quarentena organizada",
            "‚Ä¢ üìä Analisar uso de armazenamento atual", 
            "‚Ä¢ üîç Identificar candidatos para otimiza√ß√£o",
            "‚Ä¢ üéØ Definir estrat√©gia de limpeza",
            "‚Ä¢ üíæ Implementar compacta√ß√£o inteligente",
            "‚Ä¢ üîÑ Estabelecer sistema de rota√ß√£o"
        ]
        
        for acao in acoes_simuladas:
            print(f"      {acao}")
        
        print(f"\n   üí° PR√ìXIMOS PASSOS REAIS:")
        print(f"      1. Revisar an√°lise de candidatos")
        print(f"      2. Criar backups antes de qualquer a√ß√£o")
        print(f"      3. Implementar gradualmente")
        print(f"      4. Monitorar impacto")
        print(f"      5. Ajustar estrat√©gia conforme necess√°rio")
        
        return {
            'modo': 'simulacao_segura',
            'acoes_simuladas': acoes_simuladas,
            'timestamp': datetime.now().isoformat()
        }
    
    def exportar_plano_completo(self):
        """Exportar plano completo de otimiza√ß√£o"""
        print(f"\nüíæ EXPORTANDO PLANO DE OTIMIZA√á√ÉO...")
        
        # Coletar todos os dados
        total_armazenamento, distribuicao = self.analisar_uso_armazenamento()
        candidatos, espaco_potencial = self.identificar_candidatos_quarentena()
        plano = self.criar_plano_otimizacao(total_armazenamento, candidatos)
        execucao = self.executar_plano_seguro()
        
        plano_completo = {
            'timestamp': datetime.now().isoformat(),
            'diagnostico': {
                'armazenamento_total_gb': total_armazenamento,
                'espaco_liberar_gb': espaco_potencial,
                'percentual_otimizacao': plano['percentual_otimizacao']
            },
            'candidatos_quarentena': candidatos,
            'estrategia_otimizacao': plano,
            'execucao_simulada': execucao,
            'recomendacoes': [
                "Implementar limpeza gradual e monitorada",
                "Manter backups antes de qualquer a√ß√£o",
                "Estabelecer pol√≠ticas de reten√ß√£o claras",
                "Monitorar crescimento do armazenamento continuamente"
            ]
        }
        
        # Salvar plano
        with open('PLANO_OTIMIZACAO_ARMAZENAMENTO.json', 'w', encoding='utf-8') as f:
            json.dump(plano_completo, f, indent=2, ensure_ascii=False)
        
        print("   ‚úÖ PLANO_OTIMIZACAO_ARMAZENAMENTO.json salvo!")
        
        return plano_completo

def main():
    sistema = SistemaQuarentena()
    
    # Executar an√°lise completa
    plano = sistema.exportar_plano_completo()
    
    print(f"\nüíæ SISTEMA DE QUARENTENA CONCLU√çDO!")
    print(f"üìä Diagn√≥stico: {plano['diagnostico']['armazenamento_total_gb']:.2f} GB utilizados")
    print(f"üí∞ Otimiza√ß√£o: {plano['diagnostico']['espaco_liberar_gb']:.2f} GB liber√°veis")
    print(f"üéØ Estrat√©gia: {plano['diagnostico']['percentual_otimizacao']:.1f}% de melhoria potencial")

if __name__ == "__main__":
    main()
