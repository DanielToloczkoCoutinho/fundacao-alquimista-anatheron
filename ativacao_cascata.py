import json

print("ðŸ’« INICIANDO ATIVAÃ‡ÃƒO EM CASCATA")

# Carregar padrÃµes
with open('padroes_conexao_aprendidos.json') as f:
    padroes = json.load(f)

# Ordem de ativaÃ§Ã£o baseada nos nexus mestres
ordem_ativacao = ['M0', 'M9', 'M29', 'MÎ©']

modulos_ativados = set()
cascata_ativacao = []

def ativar_modulo(modulo_id, nivel=0):
    if modulo_id in modulos_ativados:
        return
        
    modulos_ativados.add(modulo_id)
    cascata_ativacao.append({
        'modulo': modulo_id,
        'nivel': nivel,
        'conexoes': padroes.get(modulo_id, [])
    })
    
    print(f"{'  ' * nivel}ðŸš€ Ativando M{modulo_id} (NÃ­vel {nivel})")
    
    # Ativar mÃ³dulos conectados
    for conexao in padroes.get(modulo_id, []):
        if conexao in padroes:  # Se a conexÃ£o Ã© outro mÃ³dulo
            ativar_modulo(conexao, nivel + 1)

# Iniciar ativaÃ§Ã£o a partir dos nexus mestres
for nexus in ordem_ativacao:
    if nexus in padroes:
        ativar_modulo(nexus)

print(f"\nðŸŽ‰ CASCATA COMPLETA:")
print(f"   ðŸ“Š MÃ³dulos ativados: {len(modulos_ativados)}")
print(f"   ðŸŽ¯ NÃ­veis de ativaÃ§Ã£o: {max([m['nivel'] for m in cascata_ativacao])}")

# Salvar cascata
with open('cascata_ativacao.json', 'w') as f:
    json.dump(cascata_ativacao, f, indent=2)

print("ðŸ’¾ SALVO: cascata_ativacao.json")
